% Sweave(file = './inherited-deletions.Rnw')
\documentclass[10pt, final]{article}
\usepackage{Sweave}
\SweaveOpts{eps=FALSE,echo=TRUE,figs.only=TRUE,keep.source=FALSE, prefix.string=figures/inherited-deletion}
\usepackage{graphicx} %should be removed before submission!
%\input{/home/sgy/jhsph/latex/sgy}
\begin{document}
<<options, echo=FALSE, eval = TRUE, echo = FALSE>>=
  options(width=75, continue = " ")
  
  library("trioClasses")
#library("Gviz")
  library("TxDb.Hsapiens.UCSC.hg18.knownGene")
##  data("fe-25", package = "trioClasses")
  data("fe", package = "trioClasses")
  data("pedigrees", package="CleftCNVAssoc")
  data("penncnvjoint", package = "CleftCNVAssoc")
  data("cnv", package = "trioClasses")
##data("cnv-25", package = "trioClasses")
@ 

<<FamilyExperiment, echo = FALSE, eval = TRUE>>=
  fe.beaty.parents <- fe.beaty[,colnames(fe.beaty)%in%parents(fe.beaty)]
  fe.pitt.parents <- fe.pitt[,colnames(fe.pitt)%in%parents(fe.pitt)]
@ 
<<freq-vec, echo = FALSE, eval = TRUE>>=
    freq.beaty.vec <- colSums(cnv(fe.beaty.parents))/nrow(cnv(fe.beaty.parents))
    freq.pitt.vec <- colSums(cnv(fe.pitt.parents))/nrow(cnv(fe.pitt.parents))
@ 
<<trioStates, eval = TRUE, echo = FALSE>>=
    trioAssay.beaty <- trioClasses:::TrioAssay(fe.beaty, type = "cnv")
    trioStates.beaty <- with(trioAssay.beaty, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
    dimnames(trioStates.beaty) <- dimnames(trioAssay.beaty$O)
    trioAssay.pitt <- trioClasses:::TrioAssay(fe.pitt, type = "cnv")
    trioStates.pitt <- with(trioAssay.pitt, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
    dimnames(trioStates.pitt) <- dimnames(trioAssay.pitt$O)
@ 
<<table-list, eval = TRUE, echo = FALSE>>=
    table.list.beaty <- apply(trioStates.beaty, 2, "table")
    table.list.pitt <- apply(trioStates.pitt, 2, "table")
@ 

<<TU, eval = TRUE, echo = FALSE>>=
TU.mat.beaty <- matrix(unlist(lapply(table.list.beaty, trioClasses:::CountTU)), nrow = length(table.list.beaty), ncol = 2, byrow = TRUE )
TU.mat.pitt <- matrix(unlist(lapply(table.list.pitt, trioClasses:::CountTU)), nrow = length(table.list.pitt), ncol = 2, byrow = TRUE )
TU.mat <- cbind(TU.mat.beaty, TU.mat.pitt)
testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
TU.mat <- TU.mat[testable,]
rownames(TU.mat) <- names(table.list.beaty)[testable]
colnames(TU.mat) <- c("T.case","U.case","T.con","U.con")
DF <- DataFrame(rowData(fe.beaty)[testable],TU.mat)
colnames(DF) <- c("grange", colnames(TU.mat))
@ 
\begin{figure}
<<hist, fig = TRUE, eval = TRUE, echo = FALSE>>=
hist(trans.vec <- rowSums(TU.mat[,c(1,3)])/rowSums(TU.mat), breaks = 20)
@ 
\end{figure}
<<fish, eval = TRUE, echo = FALSE>>=
fish.list <- apply(TU.mat,1,trioClasses:::TU.fish)
p.vec <- unlist( lapply( fish.list, function(obj) return(obj$p.value) ) )
DF <- DataFrame(DF,p.vec, trans.vec)
@ 
<<length1>>=
c(length(DF$grange),length(reduce(DF$grange)))
@ 
\begin{figure}
<<qqplot, fig = TRUE, eval = TRUE, echo = FALSE>>=
n <- nrow(DF)
plot( -log10((1:n)/n), -log10(DF$p.vec[order(DF$p.vec)]), xlim = xlim <- c(0,5), ylim = xlim)
lines( c(0,xlim[2]), c(0,xlim[2]), lty = 3 )
@ 
\end{figure}

%% \begin{figure}
%% <<manhat, fig = TRUE, echo = FALSE, eval = TRUE>>=
%% plot(-log10(DF$p.vec), pch = 20, main = "", axes = FALSE, xlab = "", ylab = "", type ="S")
%% @ 
%%\end{figure}

<<pmin, eval = TRUE, echo = FALSE>>=
regions.gr <- reduce(DF$grange)
index.vec <- subjectHits(findOverlaps(DF$grange,regions.gr))
DF.list <- split(DF, index.vec)
p.min.DF <- trioClasses:::f.cmp( DF, "p.vec", min, na.rm = TRUE )
n.DF <- trioClasses:::f.cmp( DF, "p.vec", function(vec){sum(!is.na(vec), na.rm = TRUE)})
p.median.DF <- trioClasses:::f.cmp( DF, "p.vec", median, na.rm = TRUE )
trans.median.DF <- trioClasses:::f.cmp( DF, "trans.vec", median, na.rm = TRUE )
@

<<meta, eval = TRUE, echo = FALSE>>=
meta <- values(regions.gr)
meta <- DataFrame(meta, p.min = p.min.DF$value, p.median = p.median.DF$value, trans.median = trans.median.DF$value, n.cmp = n.DF$value)
values(regions.gr) <- meta
@
<<tophits, eval = TRUE, echo = FALSE>>=
head(as(regions.gr[order(values(regions.gr)$p.min)],"data.frame"),25)
@ 
\begin{figure}
<<transvp, fig = TRUE, eval = TRUE, echo = FALSE>>=
layout(mat=matrix(1:4, nrow = 2, ncol = 2 ))
with(as(values(regions.gr),"data.frame"),plot(trans.median, -log10(p.min), pch = 20))
with(as(values(regions.gr),"data.frame"),plot(n.cmp, -log10(p.min), pch = 20))
with(as(values(regions.gr),"data.frame"),plot(n.cmp, trans.median, pch = 20))
with(as(values(regions.gr),"data.frame"),plot(width(regions.gr)/1e3, n.cmp, pch = 20))
@ 
\end{figure}
<<chr16, eval = TRUE, echo = FALSE>>=
(bad.region.gr <- regions.gr[which(values(regions.gr)$n.cmp >= 120)])
@ 
The outlier is on chromsome 16.  It is a region with \Sexpr{values(bad.region.gr)$n.cmp} components, and has width \Sexpr{width(bad.region.gr)/1e3} kB. chr16:\Sexpr{start(bad.region.gr)}-\Sexpr{end(bad.region.gr)}.  If we remove the outlying region on chromsome 16 we see the following.

\begin{figure}
<<transvp2, fig = TRUE, eval = TRUE, echo = FALSE>>=
regions.gr <- regions.gr[-which(values(regions.gr)$n.cmp >= 120)]
layout(mat=matrix(1:4, nrow = 2, ncol = 2 ))
with(as(values(regions.gr),"data.frame"),plot(trans.median, -log10(p.min), pch = 20))
with(as(values(regions.gr),"data.frame"),plot(n.cmp, -log10(p.min), pch = 20))
with(as(values(regions.gr),"data.frame"),plot(n.cmp, trans.median, pch = 20))
with(as(values(regions.gr),"data.frame"),plot(width(regions.gr), n.cmp, pch = 20))
@ 
\end{figure}
\begin{figure}
<<cumsum, fig = TRUE, width = 8, eval = TRUE, echo = FALSE>>=
TranscriptDb <- TxDb.Hsapiens.UCSC.hg18.knownGene
chrlength <- c(0,seqlengths(TranscriptDb)[paste0("chr",1:22)])
names(chrlength) <- c(names(chrlength[-1]),"foo")
chrlength <- rev(rev(chrlength)[-1])
chrstart <- cumsum(chrlength)

plot(1, type = "n", xlim = c(1,3e9), ylim = c(0,6 ), axes = FALSE, xlab = "", ylab = "" )
for( i in 1:length(regions.gr) ){
  points( chrstart[as(seqnames(regions.gr[i]),"character")] + start(DF.list[[i]]$grange), -log10(DF.list[[i]]$p.vec), pch = 20, col = i)
}
axis(1, chrstart, label = paste0("chr",1:length(chrstart)))
axis(2)
@ 
\end{figure}
<<transmedianhist, fig = TRUE, eval = TRUE, echo = FALSE>>=
with(as(values(regions.gr),"data.frame"),hist(trans.median))
@ 
<<thresh>>=
thresh <- with(as(values(regions.gr),"data.frame"),median(trans.median))
regions.gr.clean <- regions.gr[which(values(regions.gr)$trans.median >= thresh)]
DF.clean <- DF[queryHits(findOverlaps(DF$grange, regions.gr.clean)),]

@ 
\begin{figure}
<<qqplot-clean, fig = TRUE, eval = TRUE, echo = FALSE>>=
n <- nrow(DF.clean)
plot( -log10((1:n)/n), -log10(DF.clean$p.vec[order(DF.clean$p.vec)]), xlim = xlim <- c(0,5), ylim = xlim)
lines( c(0,xlim[2]), c(0,xlim[2]), lty = 3 )
@ 
\end{figure}
\begin{figure}
<<cumsum2, fig = TRUE, width = 8, eval = TRUE, echo = FALSE>>=
#TranscriptDb <- TxDb.Hsapiens.UCSC.hg18.knownGene
#chrlength <- c(0,seqlengths(TranscriptDb)[paste0("chr",1:22)])
#names(chrlength) <- c(names(chrlength[-1]),"foo")
#chrlength <- rev(rev(chrlength)[-1])
#chrstart <- cumsum(chrlength)
index.vec <- subjectHits(findOverlaps(DF.clean$grange,regions.gr.clean))
DF.clean.list <- split(DF.clean, index.vec)

plot(1, type = "n", xlim = c(1,3e9), ylim = c(0,6 ), axes = FALSE, xlab = "", ylab = "" )
for( i in 1:length(regions.gr.clean) ){
  points( chrstart[as(seqnames(regions.gr.clean[i]),"character")] + start(DF.clean.list[[i]]$grange), -log10(DF.clean.list[[i]]$p.vec), pch = 20, col = i)
}
lines( c(1,(chrstart+chrlength)[22]), rep(-log10(0.05/n),2), lty = 3)
axis(1, chrstart, label = paste0("chr",1:length(chrstart)))
axis(2)
@ 
\end{figure}
\begin{figure}
<<phist, fig = TRUE,  eval = TRUE, echo = FALSE>>=
with(as(values(regions.gr.clean),"data.frame"),hist(p.min, breaks = 10))
@ 
\end{figure}
\begin{figure}
<<transvp3, fig = TRUE, eval = TRUE, echo = FALSE>>=
#regions.gr <- regions.gr[-which(values(regions.gr)$n.cmp >= 120)]
layout(mat=matrix(1:4, nrow = 2, ncol = 2 ))
with(as(values(regions.gr.clean),"data.frame"),plot(trans.median, -log10(p.min), pch = 20))
with(as(values(regions.gr.clean),"data.frame"),plot(n.cmp, -log10(p.min), pch = 20))
with(as(values(regions.gr.clean),"data.frame"),plot(n.cmp, trans.median, pch = 20))
with(as(values(regions.gr.clean),"data.frame"),plot(width(regions.gr.clean), n.cmp, pch = 20))
@ 
\end{figure}

\end{document}

%% <<TU2>>=
%% TU.mat <- TU.mat[trans.vec >= 0.4,]
%% DF <- DF[trans.vec >= 0.4,]
%% @ 
%% <<fish2>>=
%% fish.list <- apply(TU.mat,1,trioClasses:::TU.fish)
%% p.vec <- unlist( lapply( fish.list, function(obj) return(obj$p.value) ) )
%% (DF <- DataFrame(DF,p.vec))
%% @ 
%% <<reduce2>>=
%% length(reduce(DF$grange))
%% <<badlocus, echo = FALSE, eval = FALSE>>=
%% badloci.gr <- reduce(rowData(fe.beaty[testable]))[which(countOverlaps(reduce(rowData(fe.beaty[testable])),rowData(fe.beaty[testable]))>10)]
%% bad <- subjectHits(findOverlaps( badloci.gr,DF$grange))
%% DF <- DF[-bad,]
%% TU.mat <- TU.mat[-bad,]
%% @ 
%% <<length2, echo = FALSE, eval = FALSE>>=
%% c(length(DF$grange),length(reduce(DF$grange)))
%% @ 
%% \begin{figure}
%% <<hist2, fig = TRUE, echo = FALSE, eval = FALSE>>=
%% hist(trans.vec <- rowSums(TU.mat[,c(1,3)])/rowSums(TU.mat), breaks = 10)
%% @ 
%% \end{figure}
%% @ 
%% \begin{figure}
%% <<qqplot2, fig = TRUE, echo = FALSE, eval = FALSE>>=
%% n <- nrow(DF)
%% plot( -log10((1:n)/n), -log10(DF$p.vec[order(DF$p.vec)]), xlim = xlim <- c(0,5), ylim = xlim)
%% lines( c(0,xlim[2]), c(0,xlim[2]), lty = 3 )
%% @ 
%% \end{figure}

%% The top CNV component has the followinfg trio-states.  Where `1' indicates a deletion and order is F, M, O.
%% <<transtab, eval = TRUE, echo = FALSE>>=
%%     trans.vec <- as( lapply( table.list.beaty, trioClasses:::trans.tab ), "numeric")
%%     trans.vec.pitt <- as( lapply( table.list.pitt, trioClasses:::trans.tab ), "numeric")

%%     binom.list.beaty <- lapply( table.list.beaty, trioClasses:::trans.rate )
%%     binom.list.pitt <- lapply( table.list.pitt, trioClasses:::trans.rate )

%% @ 

%% <<ci-beaty, echo = FALSE>>=
%% est.list.beaty <- lapply(binom.list.beaty, FUN = trioClasses:::get.est)
%% ci.list.beaty <- lapply(binom.list.beaty, FUN = trioClasses:::get.ci)
%% testable.beaty <- !is.na(ci.list.beaty)
%% ci.mat.beaty <- matrix(unlist(ci.list.beaty[testable.beaty]), nrow = sum(testable.beaty), ncol = 2, byrow = TRUE)
%% est.vec.beaty <- as(est.list.beaty, "numeric")[testable.beaty]
%% gr.cnp.beaty <- cnv.obj.beaty$cmp.gr[testable.beaty]
%% freq.beaty.vec <- freq.beaty.vec[testable.beaty]
%% @ 

%% <<ci-pitt, echo = FALSE>>=
%% est.list.pitt <- lapply(binom.list.pitt, FUN = trioClasses:::get.est)
%% ci.list.pitt <- lapply(binom.list.pitt, FUN = trioClasses:::get.ci)
%% testable.pitt <- !is.na(ci.list.pitt)
%% ci.mat.pitt <- matrix(unlist(ci.list.pitt[testable.pitt]), nrow = sum(testable.pitt), ncol = 2, byrow = TRUE)
%% est.vec.pitt <- as(est.list.pitt, "numeric")[testable.pitt]
%% gr.cnp.pitt <- cnv.obj.pitt$cmp.gr[testable.pitt]
%% freq.pitt.vec <- freq.pitt.vec[testable.pitt]
%% @ 

%% \begin{center}
%% \begin{figure}
%% <<trans-ci, fig = TRUE, echo = FALSE, eval = TRUE, width = 6>>=
%% par(bg = '#FFFEDB')
%% pch <- substr(as.character(seqnames(cnv.obj.beaty$cmp.gr[testable.beaty])),4,999)
%% col <- as(pch,"integer")
%% plot( est.vec.beaty, pch = 20,col = col, axes = FALSE, ylim = c(0,1) )
%% lines(c(1,length(est.vec.beaty)), rep(0.5,2), lty = 3)
%% legend(x = 1, y = 1, legend = 1:22, col = 1:22, pch = 20)
%% axis(2)
%% axis(2)
%% @ 
%% \end{figure}
%% \end{center}
%% \begin{center}
%% \begin{figure}
%% <<trans-ci-pitt, fig = TRUE, echo = FALSE, eval = TRUE, width = 6>>=
%% par(bg = '#FFFEDB')
%% pch <- substr(as.character(seqnames(cnv.obj.pitt$cmp.gr[testable.pitt])),4,999)
%% col <- as(pch,"integer")
%% plot( est.vec.pitt, pch = 20,col = col, axes = FALSE, ylim = c(0,1) )
%% lines(c(1,length(est.vec.pitt)), rep(0.5,2), lty = 3)
%% legend(x = 1, y = 1, legend = 1:22, col = 1:22, pch = 20)
%% axis(2)
%% axis(2)
%% @ 
%% \end{figure}
%% \end{center}



%% \begin{center}
%%   \begin{figure}
%%     \includegraphics[width = 4in]{./figures/ucsc}
%%     \caption{UCSC Genome Browser at chromosome 8 locus.}
%%   \end{figure}
%% \end{center}
%% <<n-tests, eval = TRUE, echo = FALSE>>=
%%     n.tests <- sum(!is.na(trans.vec))
%% @ 
%% The CNV components with signiifcant $p$-values (Bonferroni) are given below.
%% <<reduce-locus, eval = TRUE, echo = FALSE >>=
%%     (locus <- cnv.obj.beaty$cmp.gr[which(trans.vec <= 0.05/n.tests)])
%%     wd <- width(reduce(locus))/1e3
%% @ 

%% <<locus-full, echo = FALSE>>=
%% (locus.full <- reduce(reduce(cnv.obj.beaty$cmp.gr)[queryHits(findOverlaps(reduce(cnv.obj.beaty$cmp.gr), locus)) ]))

%% index.1.beaty <- queryHits(findOverlaps(cnv.obj.beaty$cmp.gr, locus[1]))
%% index.1.full.beaty <- queryHits(findOverlaps(cnv.obj.beaty$cmp.gr, locus.full[1]))
%% #index.2.beaty <- queryHits(findOverlaps(cnv.obj.beaty$cmp.gr, locus[2]))
%% #index.3.beaty <- queryHits(findOverlaps(cnv.obj.beaty$cmp.gr, locus[3]))
%% ## index.2.full.beaty <- queryHits(findOverlaps(cnv.obj.beaty$cmp.gr, locus.full[2]))
%% ## index.4.beaty <- queryHits(findOverlaps(cnv.obj.beaty$cmp.gr, locus[4]))
%% ## index.3.full.beaty <- queryHits(findOverlaps(cnv.obj.beaty$cmp.gr, locus.full[3]))
%% ## index.1.pitt <- queryHits(findOverlaps(cnv.obj.pitt$cmp.gr, locus[1]))
%% ## index.1.full.pitt <- queryHits(findOverlaps(cnv.obj.pitt$cmp.gr, locus.full[1]))
%% ## index.2.pitt <- queryHits(findOverlaps(cnv.obj.pitt$cmp.gr, locus[2]))
%% ## index.3.pitt <- queryHits(findOverlaps(cnv.obj.pitt$cmp.gr, locus[3]))
%% ## index.2.full.pitt <- queryHits(findOverlaps(cnv.obj.pitt$cmp.gr, locus.full[2]))
%% ## index.4.pitt <- queryHits(findOverlaps(cnv.obj.pitt$cmp.gr, locus[4]))
%% ## index.3.full.pitt <- queryHits(findOverlaps(cnv.obj.pitt$cmp.gr, locus.full[3]))

%% index.1.beaty.testable <-  queryHits(findOverlaps(cnv.obj.beaty$cmp.gr[testable.beaty], locus[1]))
%% index.1.full.beaty.testable <-  queryHits(findOverlaps(cnv.obj.beaty$cmp.gr[testable.beaty], locus.full[1]))
%% ## index.2.beaty.testable <-  queryHits(findOverlaps(cnv.obj.beaty$cmp.gr[testable.beaty], locus[2]))
%% ## index.3.beaty.testable <-  queryHits(findOverlaps(cnv.obj.beaty$cmp.gr[testable.beaty], locus[3]))
%% ## index.2.full.beaty.testable <-  queryHits(findOverlaps(cnv.obj.beaty$cmp.gr[testable.beaty], locus.full[2]))
%% ## index.4.beaty.testable <-  queryHits(findOverlaps(cnv.obj.beaty$cmp.gr[testable.beaty], locus[4]))
%% ## index.3.full.beaty.testable <-  queryHits(findOverlaps(cnv.obj.beaty$cmp.gr[testable.beaty], locus.full[3]))
%% ## index.1.pitt.testable <-  queryHits(findOverlaps(cnv.obj.pitt$cmp.gr[testable.pitt], locus[1]))
%% ## index.1.full.pitt.testable <-  queryHits(findOverlaps(cnv.obj.pitt$cmp.gr[testable.pitt], locus.full[1]))
%% ## index.2.pitt.testable <-  queryHits(findOverlaps(cnv.obj.pitt$cmp.gr[testable.pitt], locus[2]))
%% ## index.3.pitt.testable <-  queryHits(findOverlaps(cnv.obj.pitt$cmp.gr[testable.pitt], locus[3]))
%% ## index.2.full.pitt.testable <-  queryHits(findOverlaps(cnv.obj.pitt$cmp.gr[testable.pitt], locus.full[2]))
%% ## index.4.pitt.testable <-  queryHits(findOverlaps(cnv.obj.pitt$cmp.gr[testable.pitt], locus[4]))
%% ## index.3.full.pitt.testable <-  queryHits(findOverlaps(cnv.obj.pitt$cmp.gr[testable.pitt], locus.full[3]))

%% @ 
