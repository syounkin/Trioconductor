:toc:
:numbered:
:data-uri:


== Construct CNV Matrix ==
Before any analysis begins we construct the CNV matrix.  This matrix is a matrix containing 0,1,2 for number of deletions at a CNV component.  Each row corresponds to a subject, and each column to a cnv component.
----
> library("Trioconductor")
----
----
> source("~/jhsph/R/packages/CleftCNVAssoc/vignettes/curated/make-data.R")
> gr.deletion.beaty <- gr.beaty[values(gr.beaty)$numsnp >= 10 & values(gr.beaty)$cn %in% 0:1 ]
> homos.beaty <- with(values(gr.deletion.beaty),cn==0)
> gr.deletion.pitt <- gr.pitt[values(gr.pitt)$numsnp >= 10 & values(gr.pitt)$cn %in% 0:1 ]
> homos.pitt <- with(values(gr.deletion.pitt),cn==0)
> gr.deletion.beaty.clean <- c( unlist(reduce(split(gr.deletion.beaty, values(gr.deletion.beaty)$id))), unlist(reduce(split(gr.deletion.beaty[homos.beaty], values(gr.deletion.beaty[homos.beaty])$id))))
> gr.deletion.pitt.clean <- c( unlist(reduce(split(gr.deletion.pitt, values(gr.deletion.pitt)$id))), unlist(reduce(split(gr.deletion.pitt[homos.pitt], values(gr.deletion.pitt[homos.pitt])$id))))
----

Now with these GRanges objects we use the Trioconductor function CNVMatrix to construct the CNV matrices.
----
> system.time( cnv.obj.beaty <- CNVMatrix( gr.deletion.beaty.clean, gr = gr.deletion.pitt.clean ) )
> system.time( cnv.obj.pitt <- CNVMatrix( gr.deletion.pitt.clean, gr = gr.deletion.beaty.clean ) )
> save( cnv.obj.beaty, cnv.obj.pitt, file = "./../data/cnv.RData" )
> source("./../R/reload.R")
> reload("Trioconductor")
----

== Make Data ==
Now we use the CNV matrix as part of a FamilyExperiment object, as defined in Trioconductor.  With the FE object we may easily acces trio-states of CNV components and regions.
----
>   data("cnv", package = "Trioconductor")
>   data("pedigrees", package = "CleftCNVAssoc")
>   data("clean-samples", package = "CleftCNVAssoc")
----
Now we create the FamilyExperiment for the cleft group.
----
> (fe.beaty.pheno <- fe.beaty)
class: FamilyExperiment 
dim: 7245 1330 
exptData(0):
assays(1): cnv
rownames(7245): comp1 comp2 ... comp7244 comp7245
rowData metadata column names(0):
colnames(1330): 11005_01@1008472480 11005_02@1008472482 ... 18117_02@0070298660 18117_03@0070298657
colData names(99): id mads ... site X_merge
pedigree(2082): famid id fid mid sex dx
complete trios(442):
----
The control group.
----
> fe.pitt
class: FamilyExperiment 
dim: 7245 902 
exptData(0):
assays(1): cnv
rownames(7245): comp1 comp2 ... comp7244 comp7245
rowData metadata column names(0):
colnames(902): 173000367@0070353602 173000562@0070278291 ... 175198958@0070318441 175199696@0072922513
colData names(1): id
pedigree(752): famid id fid mid sex dx
complete trios(391):
----

== Association (Component-wise) ==
Our first idea was to do a two by two test on the transmitted and non-transmitted counts in clefts and controls.  In the process of doing so we identified regions of under-transmission, as well as a few signifcany regions.
----
> setCacheDir("sgy-cache")
> options(width=132, digits=3, scipen=4, continue =" ")
> library(Trioconductor)
>   library("TxDb.Hsapiens.UCSC.hg18.knownGene")
>   data("fe", package = "Trioconductor")
>   data("pedigrees", package="CleftCNVAssoc")
>   data("penncnvjoint", package = "CleftCNVAssoc")
>   data("cnv", package = "Trioconductor")
----

----
>   fe.beaty.parents <- fe.beaty[,colnames(fe.beaty)%in%parents(fe.beaty)]
>   fe.pitt.parents <- fe.pitt[,colnames(fe.pitt)%in%parents(fe.pitt)]
----
----
>     freq.beaty.vec <- colSums(cnv(fe.beaty.parents))/nrow(cnv(fe.beaty.parents))
>     freq.pitt.vec <- colSums(cnv(fe.pitt.parents))/nrow(cnv(fe.pitt.parents))
----
// The above must have been written before the MAF method was implemented.
----
>     trioAssay.beaty <- Trioconductor:::TrioAssay(fe.beaty, type = "cnv")
>     trioStates.beaty <- with(trioAssay.beaty, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
>     dimnames(trioStates.beaty) <- dimnames(trioAssay.beaty$O)
>     trioAssay.pitt <- Trioconductor:::TrioAssay(fe.pitt, type = "cnv")
>     trioStates.pitt <- with(trioAssay.pitt, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
>     dimnames(trioStates.pitt) <- dimnames(trioAssay.pitt$O)
----
----
>     table.list.beaty <- apply(trioStates.beaty, 2, "table")
>     table.list.pitt <- apply(trioStates.pitt, 2, "table")
----
Compute a DataFrame containing counts of transmissions by case/control with rows for components.  This is partly what distinguishes a DataFrame from a data.frame --- the ability to keep a GRanges object in a column.
----
> TU.mat.beaty <- matrix(unlist(lapply(table.list.beaty, Trioconductor:::CountTU)), nrow = length(table.list.beaty), ncol = 2, byrow = TRUE )
> TU.mat.pitt <- matrix(unlist(lapply(table.list.pitt, Trioconductor:::CountTU)), nrow = length(table.list.pitt), ncol = 2, byrow = TRUE )
> TU.mat <- cbind(TU.mat.beaty, TU.mat.pitt)
> colnames(TU.mat) <- c("T.case","U.case","T.con","U.con")
> rownames(TU.mat) <- names(table.list.beaty)
> gr.cmp <- rowData(fe.beaty)
> testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
> length(testable)
[1] 631
> TU.mat <- TU.mat[testable,]
> TU.mat.cmp <- TU.mat
> DF <- DataFrame(rowData(fe.beaty)[testable],TU.mat)
> colnames(DF) <- c("grange", colnames(TU.mat))
----
Now with that DataFrame we construct a histogram of overall transmission rate by component.
----
> hist(trans.vec <- rowSums(TU.mat[,c(1,3)])/rowSums(TU.mat), breaks = 20)
----
image::figures/fig-hist.jpg[]

Histogram of transmission rate component-wise.  We see a clear bimodal distribution.
----
> fish.list <- apply(TU.mat,1,Trioconductor:::TU.fish)
> p.vec <- unlist( lapply( fish.list, function(obj) return(obj$p.value) ) )
> (DF <- DataFrame(DF,p.vec, trans.vec))
DataFrame with 631 rows and 7 columns
       grange    T.case    U.case     T.con     U.con     p.vec trans.vec
    <GRanges> <integer> <integer> <integer> <integer> <numeric> <numeric>
1    ########        28        30        13        26     0.105     0.423
2    ########        28        31        17        28     0.216     0.433
3    ########        29        31        17        28     0.190     0.438
4    ########        35        32        23        33     0.146     0.472
5    ########        43        33        29        35     0.123     0.514
...       ...       ...       ...       ...       ...       ...       ...
627  ########        16        32        15        36     0.419     0.313
628  ########        16        32        15        35     0.445     0.316
629  ########        16        33        16        35     0.531     0.320
630  ########        14        28        13        29     0.500     0.321
631  ########        12        25         8        19     0.516     0.312
> DF.cmp <- DF
----
Number of components and number of regions is given below.
----
> c(length(DF$grange),length(reduce(DF$grange)))
[1] 631  45
----

=== Figures ===

----
> n <- nrow(DF)
> plot( -log10((1:n)/n), -log10(DF$p.vec[order(DF$p.vec)]), xlim = xlim <- c(0,5), ylim = xlim)
> lines( c(0,xlim[2]), c(0,xlim[2]), lty = 3 )
----
image::figures/fig-qqplot.jpg[]



----
> regions.gr <- reduce(DF$grange)
> index.vec <- subjectHits(findOverlaps(DF$grange,regions.gr))
> DF.list <- split(DF, index.vec)
> p.min.DF <- Trioconductor:::f.cmp( DF, "p.vec", min, na.rm = TRUE )
> n.DF <- Trioconductor:::f.cmp( DF, "p.vec", function(vec){sum(!is.na(vec), na.rm = TRUE)})
> p.median.DF <- Trioconductor:::f.cmp( DF, "p.vec", median, na.rm = TRUE )
> trans.median.DF <- Trioconductor:::f.cmp( DF, "trans.vec", median, na.rm = TRUE )
----

----
> meta <- values(regions.gr)
> meta <- DataFrame(meta, p.min = p.min.DF$value, p.median = p.median.DF$value, trans.median = trans.median.DF$value, n.cmp = n.DF$value)
> values(regions.gr) <- meta
----
----
> head(as(regions.gr[order(values(regions.gr)$p.min)],"data.frame"),25)
   seqnames     start       end  width strand     p.min p.median trans.median n.cmp
1     chr15  19768826  19982036 213211      * 0.0000307 0.001369        0.330    21
2      chr7 141419097 141441259  22163      * 0.0000820 0.000601        0.541     8
3     chr15  19341464  19545168 203705      * 0.0001407 0.001276        0.333    30
4      chr8  39356825  39497557 140733      * 0.0022040 0.011442        0.538    17
5      chr6  32611466  32643872  32407      * 0.0022912 0.012249        0.361    43
6      chr6  32059186  32065343   6158      * 0.0025599 0.006837        0.449     5
7     chr15  19095051  19205581 110531      * 0.0043068 0.015037        0.356    13
8     chr17  41785962  41914286 128325      * 0.0062858 0.010970        0.454    22
9      chr6  32094298  32107594  13297      * 0.0323497 0.046251        0.258    11
10     chr6  32066939  32093133  26195      * 0.0359375 0.307320        0.273    15
11    chr16  33778130  33820307  42178      * 0.0365526 0.307187        0.517    12
12     chr6  32650822  32664356  13535      * 0.0396005 0.066098        0.224     9
13    chr11  55124465  55209499  85035      * 0.0574315 0.529904        0.535    26
14     chr3  75502426  75719139 216714      * 0.0582423 0.302094        0.429    15
15    chr14  18347035  18372086  25052      * 0.0587674 0.453625        0.451    12
16     chr5  97074222  97125076  50855      * 0.0716268 0.085417        0.478     5
17     chr1 103941535 104099390 157856      * 0.1051024 0.267315        0.480    25
18     chr6  31388080  31397263   9184      * 0.1275405 0.453094        0.470    14
19    chr11  48890168  48918267  28100      * 0.1387235 0.485123        0.467    20
20     chr5  69359352  69433008  73657      * 0.1405460 0.231419        0.250     9
21    chr19  20404485  20507068 102584      * 0.1456802 0.348780        0.504     6
22    chr16  32404517  32530051 125535      * 0.1906860 0.658616        0.279   123
23     chr9  43594114  43674189  80076      * 0.2270230 0.401931        0.377    14
24    chr12  36404411  36532019 127609      * 0.2296317 0.315588        0.188     7
25     chr1 195087039 195087039      1      * 0.2583597 0.258360        0.404     1
----
----
> layout(mat=matrix(1:4, nrow = 2, ncol = 2 ))
> with(as(values(regions.gr),"data.frame"),plot(trans.median, -log10(p.min), pch = 20))
> with(as(values(regions.gr),"data.frame"),plot(n.cmp, -log10(p.min), pch = 20))
> with(as(values(regions.gr),"data.frame"),plot(n.cmp, trans.median, pch = 20))
> with(as(values(regions.gr),"data.frame"),plot(width(regions.gr)/1e3, n.cmp, pch = 20))
----
----
> (bad.region.gr <- regions.gr[which(values(regions.gr)$n.cmp >= 120)])
GRanges with 1 range and 4 metadata columns:
      seqnames               ranges strand |             p.min          p.median      trans.median     n.cmp
         <Rle>            <IRanges>  <Rle> |         <numeric>         <numeric>         <numeric> <integer>
  [1]    chr16 [32404517, 32530051]      * | 0.190686032146876 0.658615658165822 0.278688524590164       123
  ---
  seqlengths:
            chr1   chr1_random         chr10  chr10_random         chr11 ...          chrM          chrX   chrX_random          chrY
       247249719       1663265     135374737        113275     134452384 ...         16571     154913754       1719168      57772954
----
The outlier is on chromsome 16.  It is a region with 123 components, and has width 125.535 kB. chr16:32404517-32530051.  

----
> regions.gr <- regions.gr[-which(values(regions.gr)$n.cmp >= 120)]
> layout(mat=matrix(1:4, nrow = 2, ncol = 2 ))
> with(as(values(regions.gr),"data.frame"),plot(trans.median, -log10(p.min), pch = 20))
> with(as(values(regions.gr),"data.frame"),plot(n.cmp, -log10(p.min), pch = 20))
> with(as(values(regions.gr),"data.frame"),plot(n.cmp, trans.median, pch = 20))
> with(as(values(regions.gr),"data.frame"),plot(width(regions.gr), n.cmp, pch = 20))
----
----
> TranscriptDb <- TxDb.Hsapiens.UCSC.hg18.knownGene
> chrlength <- c(0,seqlengths(TranscriptDb)[paste0("chr",1:22)])
> names(chrlength) <- c(names(chrlength[-1]),"foo")
> chrlength <- rev(rev(chrlength)[-1])
> chrstart <- cumsum(chrlength)
> plot(1, type = "n", xlim = c(1,3e9), ylim = c(0,6 ), axes = FALSE, xlab = "", ylab = "" )
> for( i in 1:length(regions.gr) ){
   points( chrstart[as(seqnames(regions.gr[i]),"character")] + start(DF.list[[i]]$grange), -log10(DF.list[[i]]$p.vec), pch = 20, col = i)
 }
> axis(1, chrstart, label = paste0("chr",1:length(chrstart)))
> axis(2)
----
----
> with(as(values(regions.gr),"data.frame"),hist(trans.median))
----
image::figures/fig-transmedianhist.jpg[]

----
> thresh <- with(as(values(regions.gr),"data.frame"),median(trans.median))
> regions.gr.clean <- regions.gr[which(values(regions.gr)$trans.median >= thresh)]
> DF.clean <- DF[queryHits(findOverlaps(DF$grange, regions.gr.clean)),]
> 
----
----
> n <- nrow(DF.clean)
> plot( -log10((1:n)/n), -log10(DF.clean$p.vec[order(DF.clean$p.vec)]), xlim = xlim <- c(0,5), ylim = xlim)
> lines( c(0,xlim[2]), c(0,xlim[2]), lty = 3 )
----
image::figures/fig-qqplot-clean.jpg[]

----
> index.vec <- subjectHits(findOverlaps(DF.clean$grange,regions.gr.clean))
> DF.clean.list <- split(DF.clean, index.vec)
> plot(1, type = "n", xlim = c(1,3e9), ylim = c(0,6 ), axes = FALSE, xlab = "", ylab = "" )
> for( i in 1:length(regions.gr.clean) ){
   points( chrstart[as(seqnames(regions.gr.clean[i]),"character")] + start(DF.clean.list[[i]]$grange), -log10(DF.clean.list[[i]]$p.vec), pch = 20, col = i)
 }
> lines( c(1,(chrstart+chrlength)[22]), rep(-log10(0.05/n),2), lty = 3)
> axis(1, chrstart, label = paste0("chr",1:length(chrstart)))
> axis(2)
----
----
> with(as(values(regions.gr.clean),"data.frame"),hist(p.min, breaks = 10))
----
----
> layout(mat=matrix(1:4, nrow = 2, ncol = 2 ))
> with(as(values(regions.gr.clean),"data.frame"),plot(trans.median, -log10(p.min), pch = 20))
> with(as(values(regions.gr.clean),"data.frame"),plot(n.cmp, -log10(p.min), pch = 20))
> with(as(values(regions.gr.clean),"data.frame"),plot(n.cmp, trans.median, pch = 20))
> with(as(values(regions.gr.clean),"data.frame"),plot(width(regions.gr.clean), n.cmp, pch = 20))
----

== Association (Region-wise) ==
Note that this uses a very strict definition for non-transmitted.  To be non-transmitted a region must have no component in region with a trio-state that indicates non-transmission.  This may bias the estimate towards over-transmission.

First we see how many regions there are to begin with.
----
> reduce(rowData(fe.beaty))
GRanges with 2235 ranges and 0 metadata columns:
         seqnames                 ranges strand
            <Rle>              <IRanges>  <Rle>
     [1]     chr1     [ 354188,  613900]      *
     [2]     chr1     [ 836671, 1617665]      *
     [3]     chr1     [1672234, 1782971]      *
     [4]     chr1     [2072349, 2564816]      *
     [5]     chr1     [2689509, 2739781]      *
     ...      ...                    ...    ...
  [2231]     chr9 [136406525, 136477178]      *
  [2232]     chr9 [136634640, 136656446]      *
  [2233]     chr9 [137086528, 137142535]      *
  [2234]     chr9 [137731051, 137802130]      *
  [2235]     chr9 [138017087, 139528725]      *
  ---
  seqlengths:
            chr1   chr1_random         chr10  chr10_random         chr11 ...          chrM          chrX   chrX_random          chrY
       247249719       1663265     135374737        113275     134452384 ...         16571     154913754       1719168      57772954
----

----
> trans.mat <- c()
> n.reg <- length(reduce(rowData(fe.beaty)))
> system.time(
 for( i in 1:n.reg){
 # for( i in 1:10){
 fe.beaty.i <- fe.beaty[subjectHits(findOverlaps(reduce(rowData(fe.beaty))[i], rowData(fe.beaty)))]
 fe.pitt.i <- fe.pitt[subjectHits(findOverlaps(reduce(rowData(fe.pitt))[i], rowData(fe.pitt)))]
 
 if( length(rowData(fe.beaty.i)) > 1 ){
     trioAssay.beaty <- Trioconductor:::TrioAssay(fe.beaty.i, type = "cnv")
     trioStates.beaty <- with(trioAssay.beaty, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
     dimnames(trioStates.beaty) <- dimnames(trioAssay.beaty$O)
     trioAssay.pitt <- Trioconductor:::TrioAssay(fe.pitt.i, type = "cnv")
     trioStates.pitt <- with(trioAssay.pitt, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
     dimnames(trioStates.pitt) <- dimnames(trioAssay.pitt$O)
 
 #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     trans.beaty.logical <- rowSums(matrix(trioStates.beaty %in% c("011","101","111","112","122","212"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     untrans.beaty.logical <- rowSums(matrix(trioStates.beaty %in% c("010","100","111","110","121","211"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     trans.beaty <- sum(trans.beaty.logical)
     untrans.beaty <- sum(untrans.beaty.logical & !trans.beaty.logical)
 
     trans.pitt.logical <- rowSums(matrix(trioStates.pitt %in% c("011","101","111","112","122","212"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     untrans.pitt.logical <- rowSums(matrix(trioStates.pitt %in% c("010","100","111","110","121","211"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     trans.pitt <- sum(trans.pitt.logical)
     untrans.pitt <- sum(untrans.pitt.logical & !trans.pitt.logical)
 #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     trans.beaty.ma.logical <- rowSums(matrix(trioStates.beaty %in% c("011","112","212"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     untrans.beaty.ma.logical <- rowSums(matrix(trioStates.beaty %in% c("010","110","211"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     trans.beaty.ma <- sum(trans.beaty.ma.logical)
     untrans.beaty.ma <- sum(untrans.beaty.ma.logical & !trans.beaty.ma.logical)
 
     trans.pitt.ma.logical <- rowSums(matrix(trioStates.pitt %in% c("011","112","212"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     untrans.pitt.ma.logical <- rowSums(matrix(trioStates.pitt %in% c("010","110","211"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     trans.pitt.ma <- sum(trans.pitt.ma.logical)
     untrans.pitt.ma <- sum(untrans.pitt.ma.logical & !trans.pitt.ma.logical)
 #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     trans.beaty.fa.logical <- rowSums(matrix(trioStates.beaty %in% c("101","112","122"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     untrans.beaty.fa.logical <- rowSums(matrix(trioStates.beaty %in% c("100","110","121"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     trans.beaty.fa <- sum(trans.beaty.fa.logical)
     untrans.beaty.fa <- sum(untrans.beaty.fa.logical & !trans.beaty.fa.logical)
 
     trans.pitt.fa.logical <- rowSums(matrix(trioStates.pitt %in% c("101","112","122"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     untrans.pitt.fa.logical <- rowSums(matrix(trioStates.pitt %in% c("100","110","121"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     trans.pitt.fa <- sum(trans.pitt.fa.logical)
     untrans.pitt.fa <- sum(untrans.pitt.fa.logical & !trans.pitt.fa.logical)
 #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 
     trans.mat <- rbind( trans.mat, c(trans.beaty, untrans.beaty, trans.pitt, untrans.pitt, trans.beaty.ma, untrans.beaty.ma, trans.beaty.fa, untrans.beaty.fa, trans.pitt.ma, untrans.pitt.ma, trans.pitt.fa, untrans.pitt.fa ) )
 
 }else{
     trioAssay.beaty <- Trioconductor:::TrioAssay(fe.beaty.i, type = "cnv")
     trioStates.beaty <- matrix(with(trioAssay.beaty, paste0(F,M,O)),ncol=1)
     dimnames(trioStates.beaty) <- dimnames(trioAssay.beaty$O)
     trioAssay.pitt <- Trioconductor:::TrioAssay(fe.pitt.i, type = "cnv")
     trioStates.pitt <- matrix(with(trioAssay.pitt, paste0(F,M,O)),ncol=1)
     dimnames(trioStates.pitt) <- dimnames(trioAssay.pitt$O)
 
 
     trans.beaty.logical <- rowSums(matrix(trioStates.beaty %in% c("011","101","111","112","122","212"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     untrans.beaty.logical <- rowSums(matrix(trioStates.beaty %in% c("010","100","111","110","121","211"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     trans.beaty <- sum(trans.beaty.logical)
     untrans.beaty <- sum(untrans.beaty.logical & !trans.beaty.logical)
 
     trans.pitt.logical <- rowSums(matrix(trioStates.pitt %in% c("011","101","111","112","122","212"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     untrans.pitt.logical <- rowSums(matrix(trioStates.pitt %in% c("010","100","111","110","121","211"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     trans.pitt <- sum(trans.pitt.logical)
     untrans.pitt <- sum(untrans.pitt.logical & !trans.pitt.logical)
 
 #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     trans.beaty.ma.logical <- rowSums(matrix(trioStates.beaty %in% c("011","112","212"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     untrans.beaty.ma.logical <- rowSums(matrix(trioStates.beaty %in% c("010","110","211"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     trans.beaty.ma <- sum(trans.beaty.ma.logical)
     untrans.beaty.ma <- sum(untrans.beaty.ma.logical & !trans.beaty.ma.logical)
 
     trans.pitt.ma.logical <- rowSums(matrix(trioStates.pitt %in% c("011","112","212"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     untrans.pitt.ma.logical <- rowSums(matrix(trioStates.pitt %in% c("010","110","211"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     trans.pitt.ma <- sum(trans.pitt.ma.logical)
     untrans.pitt.ma <- sum(untrans.pitt.ma.logical & !trans.pitt.ma.logical)
 #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     trans.beaty.fa.logical <- rowSums(matrix(trioStates.beaty %in% c("101","112","122"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     untrans.beaty.fa.logical <- rowSums(matrix(trioStates.beaty %in% c("100","110","121"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
     trans.beaty.fa <- sum(trans.beaty.fa.logical)
     untrans.beaty.fa <- sum(untrans.beaty.fa.logical & !trans.beaty.fa.logical)
 
     trans.pitt.fa.logical <- rowSums(matrix(trioStates.pitt %in% c("101","112","122"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     untrans.pitt.fa.logical <- rowSums(matrix(trioStates.pitt %in% c("100","110","121"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
     trans.pitt.fa <- sum(trans.pitt.fa.logical)
     untrans.pitt.fa <- sum(untrans.pitt.fa.logical & !trans.pitt.fa.logical)
 #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 
     trans.mat <- rbind( trans.mat, c(trans.beaty, untrans.beaty, trans.pitt, untrans.pitt, trans.beaty.ma, untrans.beaty.ma, trans.beaty.fa, untrans.beaty.fa, trans.pitt.ma, untrans.pitt.ma, trans.pitt.fa, untrans.pitt.fa ) )
 
 }
 }
 )