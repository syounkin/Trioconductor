:toc:
:numbered:
:data-uri:

----
> library("trioClasses")
----
== Construct CNV Matrix ==
Before any analysis begins we construct the CNV matrix.  This matrix is a matrix containing 0,1,2 for number of deletions at a CNV component.  Each row corresponds to a subject, and each column to a cnv component.
----
> library("trioClasses")
> source("~/jhsph/R/packages/CleftCNVAssoc/vignettes/curated/make-data.R")
> gr.deletion.beaty <- gr.beaty[values(gr.beaty)$numsnp >= 10 & values(gr.beaty)$cn %in% 0:1 ]
> homos.beaty <- with(values(gr.deletion.beaty),cn==0)
> gr.deletion.pitt <- gr.pitt[values(gr.pitt)$numsnp >= 10 & values(gr.pitt)$cn %in% 0:1 ]
> homos.pitt <- with(values(gr.deletion.pitt),cn==0)
> gr.deletion.beaty.clean <- c( unlist(reduce(split(gr.deletion.beaty, values(gr.deletion.beaty)$id))), unlist(reduce(split(gr.deletion.beaty[homos.beaty], values(gr.deletion.beaty[homos.beaty])$id))))
> gr.deletion.pitt.clean <- c( unlist(reduce(split(gr.deletion.pitt, values(gr.deletion.pitt)$id))), unlist(reduce(split(gr.deletion.pitt[homos.pitt], values(gr.deletion.pitt[homos.pitt])$id))))
----
Now with these GRanges objects we use the trioClasses function CNVMatrix to construct the CNV matrices.
----
> system.time( cnv.obj.beaty <- CNVMatrix( gr.deletion.beaty.clean, gr = gr.deletion.pitt.clean ) )
> system.time( cnv.obj.pitt <- CNVMatrix( gr.deletion.pitt.clean, gr = gr.deletion.beaty.clean ) )
> save( cnv.obj.beaty, cnv.obj.pitt, file = "./../data/cnv.RData" )
----

== Make Data ==
Now we use the CNV matrix as part of a FamilyExperiment object, as defined in trioClasses.  With the FE object we may easily acces trio-states of CNV components and regions.
----
>   library("CleftCNVAssoc")
>   data("pedigrees", package="CleftCNVAssoc")
>   data("cnv", package = "trioClasses")
----
Now we create the FamilyExperiment for the cleft group.
----
> fe.beaty
class: FamilyExperiment 
dim: 4288 1339 
exptData(0):
assays(1): cnv
rownames(4288): comp1 comp2 ... comp4287 comp4288
rowData metadata column names(0):
colnames(1339): 11005_01@1008472480 11005_02@1008472482 ...
  18117_02@0070298660 18117_03@0070298657
colData names(1): id
pedigree(2082): famid id fid mid sex dx
complete trios(445):
----
The control group.
----
> fe.pitt
class: FamilyExperiment 
dim: 3916 902 
exptData(0):
assays(1): cnv
rownames(3916): comp1 comp2 ... comp3915 comp3916
rowData metadata column names(0):
colnames(902): 173000367@0070353602 173000562@0070278291 ...
  175198958@0070318441 175199696@0072922513
colData names(1): id
pedigree(752): famid id fid mid sex dx
complete trios(391):
----

== Association (Component-wise) ==
Our first idea was to do a two by two test on the transmitted and non-transmitted counts in clefts and controls.  In the process of doing so we identified regions of under-transmission, as well as a few signifcany regions.

// The above must have been written before the MAF method was implemented.
Compute a DataFrame containing counts of transmissions by case/control with rows for components.  This is partly what distinguishes a DataFrame from a data.frame --- the ability to keep a GRanges object in a column.
----
> TU.mat.beaty <- matrix(unlist(lapply(table.list.beaty, trioClasses:::CountTU)), nrow = length(table.list.beaty), ncol = 2, byrow = TRUE )
> TU.mat.pitt <- matrix(unlist(lapply(table.list.pitt, trioClasses:::CountTU)), nrow = length(table.list.pitt), ncol = 2, byrow = TRUE )
> TU.mat <- cbind(TU.mat.beaty, TU.mat.pitt)