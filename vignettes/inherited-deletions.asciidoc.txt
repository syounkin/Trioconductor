:toc:
:numbered:
:data-uri:


== Construct CNV Matrix ==
Before any analysis begins we construct the CNV matrix.  This matrix is a matrix containing 0,1,2 for number of deletions at a CNV component.  Each row corresponds to a subject, and each column to a cnv component.
----
> library("trioClasses")
----
----
> source("~/jhsph/R/packages/CleftCNVAssoc/vignettes/curated/make-data.R")
> gr.deletion.beaty <- gr.beaty[values(gr.beaty)$numsnp >= 10 & values(gr.beaty)$cn %in% 0:1 ]
> homos.beaty <- with(values(gr.deletion.beaty),cn==0)
> gr.deletion.pitt <- gr.pitt[values(gr.pitt)$numsnp >= 10 & values(gr.pitt)$cn %in% 0:1 ]
> homos.pitt <- with(values(gr.deletion.pitt),cn==0)
> gr.deletion.beaty.clean <- c( unlist(reduce(split(gr.deletion.beaty, values(gr.deletion.beaty)$id))), unlist(reduce(split(gr.deletion.beaty[homos.beaty], values(gr.deletion.beaty[homos.beaty])$id))))
> gr.deletion.pitt.clean <- c( unlist(reduce(split(gr.deletion.pitt, values(gr.deletion.pitt)$id))), unlist(reduce(split(gr.deletion.pitt[homos.pitt], values(gr.deletion.pitt[homos.pitt])$id))))
----
Now with these GRanges objects we use the trioClasses function CNVMatrix to construct the CNV matrices.
----
> system.time( cnv.obj.beaty <- CNVMatrix( gr.deletion.beaty.clean, gr = gr.deletion.pitt.clean ) )
> system.time( cnv.obj.pitt <- CNVMatrix( gr.deletion.pitt.clean, gr = gr.deletion.beaty.clean ) )
> save( cnv.obj.beaty, cnv.obj.pitt, file = "./../data/cnv.RData" )
----

== Make Data ==
Now we use the CNV matrix as part of a FamilyExperiment object, as defined in trioClasses.  With the FE object we may easily acces trio-states of CNV components and regions.
----
>   library("CleftCNVAssoc")
>   data("pedigrees", package="CleftCNVAssoc")
>   data("cnv", package = "trioClasses")
----
Now we create the FamilyExperiment for the cleft group.
----
> fe.beaty
class: FamilyExperiment 
dim: 7256 1339 
exptData(0):
assays(1): cnv
rownames(7256): comp1 comp2 ... comp7255 comp7256
rowData metadata column names(0):
colnames(1339): 11005_01@1008472480 11005_02@1008472482 ... 18117_02@0070298660 18117_03@0070298657
colData names(1): id
pedigree(2082): famid id fid mid sex dx
complete trios(445):
----
The control group.
----
> fe.pitt
class: FamilyExperiment 
dim: 7256 902 
exptData(0):
assays(1): cnv
rownames(7256): comp1 comp2 ... comp7255 comp7256
rowData metadata column names(0):
colnames(902): 173000367@0070353602 173000562@0070278291 ... 175198958@0070318441 175199696@0072922513
colData names(1): id
pedigree(752): famid id fid mid sex dx
complete trios(391):
----

== Association (Component-wise) ==
Our first idea was to do a two by two test on the transmitted and non-transmitted counts in clefts and controls.  In the process of doing so we identified regions of under-transmission, as well as a few signifcany regions.

// The above must have been written before the MAF method was implemented.
Compute a DataFrame containing counts of transmissions by case/control with rows for components.  This is partly what distinguishes a DataFrame from a data.frame --- the ability to keep a GRanges object in a column.
----
> TU.mat.beaty <- matrix(unlist(lapply(table.list.beaty, trioClasses:::CountTU)), nrow = length(table.list.beaty), ncol = 2, byrow = TRUE )
> TU.mat.pitt <- matrix(unlist(lapply(table.list.pitt, trioClasses:::CountTU)), nrow = length(table.list.pitt), ncol = 2, byrow = TRUE )
> TU.mat <- cbind(TU.mat.beaty, TU.mat.pitt)
> colnames(TU.mat) <- c("T.case","U.case","T.con","U.con")
> rownames(TU.mat) <- names(table.list.beaty)
> TU.mat.cmp <- TU.mat
> gr.cmp <- rowData(fe.beaty)
> testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
> TU.mat <- TU.mat[testable,]
> DF <- DataFrame(rowData(fe.beaty)[testable],TU.mat)
> colnames(DF) <- c("grange", colnames(TU.mat))
----
Now with that DataFrame we construct a histogram of overall transmission rate by component.
----
> hist(trans.vec <- rowSums(TU.mat[,c(1,3)])/rowSums(TU.mat), breaks = 20)
----
image::figures/fig-hist.jpg[]

Histogram of transmission rate component-wise.  We see a clear bimodal distribution.
----
DataFrame with 632 rows and 7 columns
       grange    T.case    U.case     T.con     U.con     p.vec trans.vec
    <GRanges> <integer> <integer> <integer> <integer> <numeric> <numeric>
1    ########        28        30        13        26     0.105     0.423
2    ########        28        31        17        28     0.216     0.433
3    ########        29        31        17        28     0.190     0.438
4    ########        35        32        23        33     0.146     0.472
5    ########        43        33        29        35     0.123     0.514
...       ...       ...       ...       ...       ...       ...       ...
628  ########        19        19        12        15     0.425     0.477
629  ########        19        19        13        17     0.382     0.471
630  ########        17        18        13        17     0.432     0.462
631  ########        46        44        40        28     0.870     0.544
632  ########        47        47        41        29     0.894     0.537
----
Number of components and number of regions is given below.
----
> c(length(DF$grange),length(reduce(DF$grange)))
[1] 632  45
----

=== Figures ===

image::figures/fig-qqplot.jpg[]




----
   seqnames     start       end  width strand     p.min p.median trans.median n.cmp
1     chr15  19768826  19982036 213211      * 0.0000307 0.001369        0.330    21
2      chr7 141419097 141441259  22163      * 0.0000983 0.000659        0.541     8
3     chr15  19341464  19545168 203705      * 0.0001407 0.001276        0.333    30
4      chr8  39356825  39497557 140733      * 0.0022040 0.012376        0.536    17
5      chr6  32611466  32643872  32407      * 0.0022198 0.015087        0.361    43
6      chr6  32059186  32065343   6158      * 0.0025599 0.006837        0.449     5
7     chr15  19095051  19205581 110531      * 0.0043068 0.015037        0.356    13
8     chr17  41785962  41914286 128325      * 0.0062858 0.010970        0.454    22
9      chr6  32094298  32107594  13297      * 0.0323497 0.046251        0.258    11
10     chr6  32066939  32093133  26195      * 0.0359375 0.307320        0.273    15
11     chr6  32650822  32664356  13535      * 0.0396005 0.066098        0.224     9
12    chr16  33778130  33820307  42178      * 0.0422303 0.316474        0.516    12
13    chr11  55124465  55209499  85035      * 0.0574315 0.529904        0.535    26
14     chr3  75502426  75719139 216714      * 0.0582423 0.302094        0.432    15
15    chr14  18347035  18372086  25052      * 0.0587674 0.413121        0.455    12
16     chr5  97074222  97125076  50855      * 0.0716268 0.085417        0.478     5
17     chr1 103941535 104099390 157856      * 0.1051024 0.267315        0.480    25
18     chr5  69359352  69433008  73657      * 0.1057531 0.180652        0.262     9
19     chr6  31388080  31397263   9184      * 0.1339235 0.376097        0.478    14
20    chr19  20404485  20507068 102584      * 0.1456802 0.373094        0.501     6
21    chr11  48890168  48918267  28100      * 0.1614379 0.485123        0.465    20
22    chr16  32404517  32530051 125535      * 0.1906860 0.682627        0.277   123
23    chr12  36404411  36532019 127609      * 0.2296317 0.315588        0.185     7
24     chr1 195087039 195087039      1      * 0.2583597 0.258360        0.404     1
25     chr9  43594114  43674189  80076      * 0.2810095 0.463009        0.372    14
----
----
GRanges with 1 range and 4 metadata columns:
      seqnames               ranges strand |             p.min          p.median      trans.median     n.cmp
         <Rle>            <IRanges>  <Rle> |         <numeric>         <numeric>         <numeric> <integer>
  [1]    chr16 [32404517, 32530051]      * | 0.190686032146876 0.682627027049546 0.276872964169381       123
  ---
  seqlengths:
            chr1   chr1_random          chr2   chr2_random          chr3 ...          chrX   chrX_random          chrY          chrM
       247249719       1663265     242951149        185571     199501827 ...     154913754       1719168      57772954         16571
----
The outlier is on chromsome 16.  It is a region with 123 components, and has width 125.535 kB. chr16:32404517-32530051.  

image::figures/fig-cumsum.jpg[]

image::figures/fig-transmedianhist.jpg[]

image::figures/fig-qqplot-clean.jpg[]

image::figures/fig-cumsum2.jpg[]


== Association (Region-wise) ==
Note that this uses a very strict definition for non-transmitted.  To be non-transmitted a region must have no component in region with a trio-state that indicates non-transmission.  This may bias the estimate towards over-transmission.

First we see how many regions there are to begin with.
----
> reduce(rowData(fe.beaty))
GRanges with 2237 ranges and 0 metadata columns:
         seqnames               ranges strand
            <Rle>            <IRanges>  <Rle>
     [1]     chr1   [ 354188,  613900]      *
     [2]     chr1   [ 836671, 1617665]      *
     [3]     chr1   [1672234, 1782971]      *
     [4]     chr1   [2072349, 2564816]      *
     [5]     chr1   [2689509, 2739781]      *
     ...      ...                  ...    ...
  [2233]    chr22 [47520376, 47559621]      *
  [2234]    chr22 [47791598, 47892761]      *
  [2235]    chr22 [47983471, 48039811]      *
  [2236]    chr22 [48892935, 49130879]      *
  [2237]    chr22 [49276447, 49337535]      *
  ---
  seqlengths:
            chr1   chr1_random          chr2   chr2_random          chr3 ...          chrX   chrX_random          chrY          chrM
       247249719       1663265     242951149        185571     199501827 ...     154913754       1719168      57772954         16571
----
But many of these are rare.
Here we filter out any rare deletions by requiring at least 25 observeable transmissins in the cleft group and the control group.
----
> TU.mat <- trans.mat
> testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
> TU.mat <- TU.mat[testable,]
----
First we display the function that performs Fisher's exact test.
----
> trioClasses:::TU.fish
function (TU.vec) 
{
    if (!identical(c("T.case", "U.case", "T.con", "U.con"), names(TU.vec))) 
        return("TU vector must have the correct names.")
    fish <- fisher.test(matrix(TU.vec, nrow = 2, ncol = 2, byrow = TRUE), 
        alternative = "greater")
    return(fish)
}
<environment: namespace:trioClasses>
----
Then we apply it to each region after filtering out regions that did not have enough observations.
----
> fish.list <- apply(TU.mat,1,trioClasses:::TU.fish)
> p.vec <- unlist( lapply( fish.list, function(obj) return(obj$p.value) ) )
> DF <- DataFrame(DF,p.vec,transrate.all[testable],transrate.con[testable],transrate.cleft[testable])
> head(as(DF[with(as(DF,"data.frame"),order(p.vec)),],"data.frame"))
  grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con    p.vec transrate.all.testable.
1           chr15     18474541   20730425      2255885             *     54     47    44    94 0.000644                   0.410
2            chr7    141380317  141447476        67160             *     69     38    68    78 0.003397                   0.542
3            chr8     39341981   39548228       206248             *    140    104    32    45 0.010868                   0.536
4            chr6     32536895   32684456       147562             *     54     53    45    78 0.023386                   0.430
5            chr6     32055573   32124218        68646             *     35     33    17    32 0.052925                   0.444
6           chr17     41755843   42148466       392624             *     93     74    38    48 0.054580                   0.518
  transrate.con.testable. transrate.cleft.testable.
1                   0.319                     0.535
2                   0.466                     0.645
3                   0.416                     0.574
4                   0.366                     0.505
5                   0.347                     0.515
6                   0.442                     0.557
----
There are 39 regions that were tested.  Here we see the first six ordered by p-value and later ordered by transmission rate.
----
> head(as(DF[with(as(DF,"data.frame"),order(transrate.con.testable.)),],"data.frame"))
  grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con    p.vec transrate.all.testable.
1           chr12     36270798   36733128       462331             *      7     24     5    26 0.374521                   0.194
2            chr1    147272181  147849072       576892             *      8     32    34    87 0.890460                   0.261
3           chr15     18474541   20730425      2255885             *     54     47    44    94 0.000644                   0.410
4            chr6     32694224   32788048        93825             *      5     23     8    17 0.935376                   0.245
5            chr6     32055573   32124218        68646             *     35     33    17    32 0.052925                   0.444
6            chr9     43515795   44821332      1305538             *     32     49    46    80 0.385996                   0.377
  transrate.con.testable. transrate.cleft.testable.
1                   0.161                     0.226
2                   0.281                     0.200
3                   0.319                     0.535
4                   0.320                     0.179
5                   0.347                     0.515
6                   0.365                     0.395
----

Note that a region on chromosome six appears twice in the top six by p-value.  However we see in the six regions with the lowest transmissin rates that there is a region with extremly low transmission rate nearby.  It seems likely that both the chr15 and chr6 signals are spurious and due to false positives in the controls.

=== Figures ===

image::figures/fig-transhist.jpg[]


image::figures/fig-cifigcleft.jpg[]

image::figures/fig-cifigcon.jpg[]

image::figures/fig-cifigall.jpg[]

image::figures/fig-cifig1.jpg[]


=== Tables ===

.Transmission Counts
[width="60%",cols="8"]
[options="header",grid="rows"]
|======
|pos|width|p-value|nearest gene|cleft transmitted|cleft untransmitted|control transmitted|control untransmitted
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=Chr7:141380317-141447476[chr7:141380317-141447476]|67,160|0.003397|link:http://genome.ucsc.edu/cgi-bin/hgGene?hgg_gene=uc003vwy.1&hgg_prot=NP_004659&hgg_chrom=chr7&hgg_start=141342147&hgg_end=141453016&hgg_type=knownGene&db=hg18&hgsid=340436443[MGAM]|69 (0.645)|38|68 (0.466)|78
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=Chr8:39341981-39548228[chr8:39,341,981-39,548,228]|206,248 |0.010868|link:http://genome.ucsc.edu/cgi-bin/hgc?hgsid=340437289&c=chr8&o=39427720&t=39499665&g=refGene&i=NR_073423[ADAM3A], link:http://genome.ucsc.edu/cgi-bin/hgc?hgsid=340437289&c=chr8&o=39291338&t=39379532&g=refGene&i=NR_001448[ADAM5]|140 (0.574)|104|32 (0.416)|45
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=chr15:18474541-20730425[chr15:18,474,541-20,730,425]|2,255,885|0.000644|too many, centromere|54 (0.535)|47|44 (0.319)|94
|======

=== MGAM & ADAM9 ===

.MGAM
[quote, Vincent-Chong et al., PLoS One 2013]
____
This study has identified a novel genomic amplification on chromosome 7q34 which was present in 34 out of 46 OSCC samples. The MGAM gene at this locus was significantly over expressed (6.6 fold) in 29 out of 30 samples analysed. It has been previously suggested that MGAM is a carbohydrate active enzyme that is involved in cell metabolism by breaking down the dietary starches and sugars into glucose [67]. The involvement of this gene in carcinogenesis could be explained by the Warburg effect which implies that during tumor progression, alterations are observed in glucose metabolism including glycolysis and oxidative phosphorylation process in cancer cells [68]. It could be hypothesized that over expression of MGAM may promote tumor growth by altering cell metabolism. Further investigation of this gene is required to elucidate its function, regulation and role in oral carcinogenesis.
____

See link:http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0054705[Vincent-Chong et al.] in Plos One -  "Genome Wide Analysis of Chromosomal Alterations in Oral Squamous Cell Carcinomas Revealed over Expression of MGAM and ADAM9." link:http://www.ncbi.nlm.nih.gov/pubmed/?term=23405089[PMID:23405089]

=== Filter ===

==== HLA Super-Locus ====

Five distinct but nearby regions on chromosome 6 appear between 29,940,311 and 32,788,048 (hg18) with transmission rates of 0.533, 0.450, 0.347, 0.366, 0.320.  The exceptionally low transmission rates for the last three of these regions raised eyebrows and upon inspection of the genomic location we immediately observed that 4 of 5 of these regions contain a gene in the HLA family.  The HLA family of genes are known to be...

// control: 0.533, 0.450, 0.347, 0.366, 0.320
// cleft: 0.546, 0.515, 0.515, 0.505, 0.179

.Chromosome 6 Regions & HLA
[width="60%",cols="4"]
[options="header",grid="rows"]
|======
|UCSC Genome Browser (hg18)|band|Trans. (control)
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=chr6:29940311-30032810[chr6:29940311-30032810]|6p21.33|0.533
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=chr6:31382534-31422222[chr6:31382534-31422222]|6p21.33|0.450
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=chr6:32055573-32124218[chr6:32055573-32124218]|6p21.32|0.347
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=chr6:32536895-32684456[chr6:32536895-32684456]|6p21.32|0.366
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=chr6:32694224-32788048[chr6:32694224-32788048]|6p21.32|0.320
|======

image:figures/HLA.jpg[link="https://en.wikipedia.org/wiki/Human_leukocyte_antigen"]

We choose to remove these due to the unusually high amount of known variability in this region.  We believe the noisy control data, coupled with the highly variable HLA region results in deflated transmission rates in the controls, and therefore testing against the controls will result in false positive detection.

----
> hla.gr <- GRanges(seqname="chr6", range = IRanges(start = 29940311, end =  32788048))
----

==== Centromeres, Telomeres & Low Mapability ====

We also include UCSC centromere/telomere locations and R. Scharpfs list of regions of low-mapability in the filter.

----
> data("centromere")
> lowmap.gr <- readRDS(file = "./../inst/low_mappability.rds")
> seqlevels(lowmap.gr) <- seqlevels(DF$grange)
> seqlengths(lowmap.gr) <- seqlengths(DF$grange)
> filter.gr <- reduce(c(lowmap.gr,centromere.gr,hla.gr))
> dist.vec <- as.data.frame(distanceToNearest(DF$grange,filter.gr))$distance
> #DF <- DataFrame(DF[order(dist.vec),],dist.vec[order(dist.vec)])
> DF <- DataFrame(DF, dist.vec)
> as.data.frame(DF)
   grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con    p.vec transrate.all.testable.
1             chr1     12769266   13058015       288750             *     23     13    14    12 0.296532                   0.597
2             chr1    103899238  104126342       227105             *     48     39    39    41 0.249911                   0.521
3             chr1    147272181  147849072       576892             *      8     32    34    87 0.890460                   0.261
4             chr1    194976397  195199868       223472             *     13     15    15    21 0.449029                   0.438
5             chr2     40785003   41129076       344074             *     66     63    57    52 0.619394                   0.517
6             chr2     89132524   91107283      1974760             *     16     43    28    29 0.995925                   0.379
7             chr2    242565979  242692820       126842             *     26     32    25    30 0.601028                   0.451
8             chr3     46765401   46827683        62283             *     12     15    18    14 0.878068                   0.508
9             chr3     65159939   65187636        27698             *     72     59    50    39 0.623839                   0.555
10            chr3     75470851   75730577       259727             *     46     54    50    52 0.715792                   0.475
11            chr4     68997831   69258302       260472             *     33     35    80    67 0.829317                   0.526
12            chr4    161252445  161314427        61983             *     28     33    35    27 0.911724                   0.512
13            chr5      8756085    8811041        54957             *     19     26    29    18 0.981446                   0.522
14            chr5     68871012   70700419      1829408             *     24     32    48    50 0.815949                   0.468
15            chr5     97073409   97267981       194573             *     35     27    20    30 0.061418                   0.491
16            chr6     29940311   30032810        92500             *     77     64    73    64 0.459653                   0.540
17            chr6     31382534   31422222        39689             *     53     50    45    55 0.217781                   0.483
18            chr6     32055573   32124218        68646             *     35     33    17    32 0.052925                   0.444
19            chr6     32536895   32684456       147562             *     54     53    45    78 0.023386                   0.430
20            chr6     32694224   32788048        93825             *      5     23     8    17 0.935376                   0.245
21            chr6     67065007   67111682        46676             *     72     62    58    44 0.729281                   0.551
22            chr6     79022244   79098876        76633             *    154    114   108    80 0.536642                   0.575
23            chr7     57778797   62099233      4320437             *     13     20   102   148 0.630937                   0.406
24            chr7    101914898  102109692       194795             *     11     18    19    28 0.674996                   0.395
25            chr7    141380317  141447476        67160             *     69     38    68    78 0.003397                   0.542
26            chr8     39341981   39548228       206248             *    140    104    32    45 0.010868                   0.536
27            chr9     43515795   44821332      1305538             *     32     49    46    80 0.385996                   0.377
28           chr11     48220946   48986763       765818             *     40     32    59    53 0.409198                   0.538
29           chr11     55116789   55216671        99883             *    137    105    92    75 0.419150                   0.560
30           chr12     36270798   36733128       462331             *      7     24     5    26 0.374521                   0.194
31           chr14     18189975   19502504      1312530             *     40     48    72    77 0.712688                   0.473
32           chr15     18474541   20730425      2255885             *     54     47    44    94 0.000644                   0.410
33           chr15     32459510   32631865       172356             *     61     64    64    46 0.941827                   0.532
34           chr16     31931481   33820307      1888827             *    121    104   128   111 0.518116                   0.537
35           chr17     41755843   42148466       392624             *     93     74    38    48 0.054580                   0.518
36           chr18     64879175   64906488        27314             *     22     21    26    20 0.764030                   0.539
37           chr19     20349698   20523385       173688             *     54     43    40    38 0.334945                   0.537
38           chr19     47939188   48537433       598246             *     29     32    24    27 0.555395                   0.473
39           chr20     52080333   52094148        13816             *     44     45    40    29 0.890151                   0.532
   transrate.con.testable. transrate.cleft.testable. dist.vec
1                    0.538                     0.639        0
2                    0.487                     0.552        0
3                    0.281                     0.200        0
4                    0.417                     0.464        0
5                    0.523                     0.512 35700002
6                    0.491                     0.271        0
7                    0.455                     0.448        0
8                    0.562                     0.444 19283317
9                    0.562                     0.550   923364
10                   0.490                     0.460        0
11                   0.544                     0.485        0
12                   0.565                     0.459 15971444
13                   0.617                     0.422  7892084
14                   0.490                     0.429        0
15                   0.400                     0.565  1519019
16                   0.533                     0.546        0
17                   0.450                     0.515        0
18                   0.347                     0.515        0
19                   0.366                     0.505        0
20                   0.320                     0.179        0
21                   0.569                     0.537  4821006
22                   0.574                     0.575 16628124
23                   0.408                     0.394        0
24                   0.404                     0.379        0
25                   0.466                     0.645  1481524
26                   0.416                     0.574  4341772
27                   0.365                     0.395        0
28                   0.527                     0.556        0
29                   0.551                     0.566   258788
30                   0.161                     0.226        0
31                   0.483                     0.455        0
32                   0.319                     0.535        0
33                   0.582                     0.488  1748509
34                   0.536                     0.538        0
35                   0.442                     0.557        0
36                   0.565                     0.512 48088174
37                   0.513                     0.557  3839615
38                   0.471                     0.475        0
39                   0.580                     0.494  8502852
----

The filter accounts for 281 MB made up of 325 distinct regions.



image::figures/fig-disthist.jpg[]



In the figure above a horizontal line is drawn at 1 MB.  26 regions are within 1 MB of a bad region, which is 67% of all regions! Note that 24 regions overlap a bad region.  In the figure below points in red are within 1 MB of a bad region.

image::figures/fig-disttrans.jpg[]


image::figures/fig-filterout.jpg[]



==== Region-wise ====

----
> TU.mat <- TU.mat[DF$dist.vec > 1e6,]
> ci.mat.cleft <- ci.mat.cleft[DF$dist.vec > 1e6,]
> ci.mat.con <- ci.mat.con[DF$dist.vec > 1e6,]
> DF <- DF[DF$dist.vec > 1e6,]
----

==== Component-wise ====

----
> TU.mat.cmp <- TU.mat.cmp[DF.cmp$dist.vec > 1e6,]
> DF.cmp <- DF.cmp[DF.cmp$dist.vec > 1e6,]
----

=== Chromosome 7 ===




=== Chromosome 8 ===



=== Figure 1 ===

image::figures/fig-cifigcleftnew.jpg[]




=== QQ Plot ===


----
> library("snpStats")
> par(bg="lightyellow")
> qq.chisq(-2*log(DF$p.vec), df = 2, pch = 20 )
      N omitted  lambda 
 13.000   0.000   0.363 
> 
----
image::figures/fig-qqPlotregion.jpg[]


----
> pdf(file="figures/qqplotregion.pdf")
> par(bg="lightyellow")
> qq.chisq(-2*log(DF$p.vec), df = 2, pch = 20 )
      N omitted  lambda 
 13.000   0.000   0.363 
> dev.off()
pdf 
  2 
----

There are 13 tests in this figure.

----
> o <- order(DF$p.vec)
> as.data.frame(DF[o,])
   grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con  p.vec transrate.all.testable.
1             chr7    141380317  141447476        67160             *     69     38    68    78 0.0034                   0.542
2             chr8     39341981   39548228       206248             *    140    104    32    45 0.0109                   0.536
3             chr5     97073409   97267981       194573             *     35     27    20    30 0.0614                   0.491
4            chr19     20349698   20523385       173688             *     54     43    40    38 0.3349                   0.537
5             chr6     79022244   79098876        76633             *    154    114   108    80 0.5366                   0.575
6             chr2     40785003   41129076       344074             *     66     63    57    52 0.6194                   0.517
7             chr6     67065007   67111682        46676             *     72     62    58    44 0.7293                   0.551
8            chr18     64879175   64906488        27314             *     22     21    26    20 0.7640                   0.539
9             chr3     46765401   46827683        62283             *     12     15    18    14 0.8781                   0.508
10           chr20     52080333   52094148        13816             *     44     45    40    29 0.8902                   0.532
11            chr4    161252445  161314427        61983             *     28     33    35    27 0.9117                   0.512
12           chr15     32459510   32631865       172356             *     61     64    64    46 0.9418                   0.532
13            chr5      8756085    8811041        54957             *     19     26    29    18 0.9814                   0.522
   transrate.con.testable. transrate.cleft.testable. dist.vec
1                    0.466                     0.645  1481524
2                    0.416                     0.574  4341772
3                    0.400                     0.565  1519019
4                    0.513                     0.557  3839615
5                    0.574                     0.575 16628124
6                    0.523                     0.512 35700002
7                    0.569                     0.537  4821006
8                    0.565                     0.512 48088174
9                    0.562                     0.444 19283317
10                   0.580                     0.494  8502852
11                   0.565                     0.459 15971444
12                   0.582                     0.488  1748509
13                   0.617                     0.422  7892084
----

----
> par(bg="lightyellow")
> qq.chisq(-2*log(DF.cmp$p.vec), df = 2, pch = 20 )
      N omitted  lambda 
  84.00    0.00    0.73 
> 
----
image::figures/fig-qqPlotcmp.jpg[]


----
> pdf(file="figures/qqplotcmp.pdf")
> par(bg="lightyellow")
> qq.chisq(-2*log(DF.cmp$p.vec), df = 2, pch = 20 )
      N omitted  lambda 
  84.00    0.00    0.73 
> dev.off()
pdf 
  2 
----

There are 84 tests in this figure.

----
> o <- order(DF.cmp$p.vec)
> as.data.frame(DF.cmp[o,])
   grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con     p.vec trans.vec dist.vec.cmp
1             chr7    141435189  141439888         4700             *     77     31    67    75 0.0000983     0.576      1489112
2             chr7    141419097  141420758         1662             *     83     43    74    91 0.0002667     0.540      1508242
3             chr7    141420759  141423760         3002             *     83     44    75    90 0.0005212     0.541      1505240
4             chr7    141429472  141433796         4325             *     83     44    75    89 0.0006241     0.543      1495204
5             chr7    141423761  141427767         4007             *     83     45    75    90 0.0006938     0.539      1501233
6             chr7    141427768  141429471         1704             *     83     45    75    89 0.0008276     0.541      1499529
7             chr7    141433797  141435188         1392             *     82     42    74    82 0.0012667     0.557      1493812
8             chr8     39356825   39370186        13362             *    147     86    27    37 0.0022040     0.586      4519814
9             chr8     39370187   39379683         9497             *    161    112    31    45 0.0036342     0.550      4510317
10            chr8     39379684   39393417        13734             *    163    117    31    45 0.0050418     0.545      4496583
11            chr8     39476659   39497557        20899             *    139     74    21    26 0.0074682     0.615      4392443
12            chr8     39428327   39442543        14217             *    165    131    34    50 0.0093737     0.524      4447457
13            chr8     39460088   39469612         9525             *    153    111    30    42 0.0100639     0.545      4420388
14            chr8     39442544   39449313         6770             *    165    132    34    50 0.0101454     0.522      4440687
15            chr8     39449314   39449314            1             *    165    134    34    50 0.0118388     0.520      4440686
16            chr8     39393418   39401865         8448             *    164    125    32    45 0.0123764     0.536      4488135
17            chr8     39449315   39450167          853             *    164    132    34    49 0.0137356     0.522      4439833
18            chr8     39473098   39476658         3561             *    152    108    27    37 0.0138689     0.552      4413342
19            chr8     39421344   39428326         6983             *    165    130    34    48 0.0140152     0.528      4461674
20            chr8     39401866   39408899         7034             *    164    125    33    45 0.0161666     0.537      4481101
21            chr8     39408900   39421343        12444             *    164    127    33    45 0.0187519     0.534      4468657
22            chr8     39457082   39460087         3006             *    161    124    31    42 0.0221473     0.536      4429913
23            chr8     39469613   39473097         3485             *    152    108    28    36 0.0240164     0.556      4416903
24            chr8     39450168   39457081         6914             *    162    128    31    42 0.0275342     0.532      4432919
25            chr5     97076368   97087516        11149             *     35     29    20    31 0.0716268     0.478      1699484
26            chr5     97087517   97121798        34282             *     35     30    20    31 0.0837526     0.474      1665202
27            chr5     97075236   97076367         1132             *     35     29    20    30 0.0854169     0.482      1710633
28            chr5     97121799   97125076         3278             *     35     30    20    30 0.0992070     0.478      1661924
29            chr5     97074222   97075235         1014             *     31     27    18    28 0.1045871     0.471      1711765
30            chr7    141439889  141441259         1371             *     12     17    13    38 0.1112185     0.312      1487741
31           chr19     20404485   20413667         9183             *     42     34    22    28 0.1456802     0.508      3949333
32           chr19     20413668   20418018         4351             *     45     44    26    38 0.1465092     0.464      3944982
33           chr19     20422200   20482954        60755             *     56     52    40    43 0.3611987     0.503      3880046
34            chr6     79031111   79031808          698             *    166    150    89    87 0.3730067     0.518     16695192
35           chr19     20418019   20422199         4181             *     55     52    40    43 0.3849891     0.500      3940801
36           chr19     20482955   20493452        10498             *     56     52    40    42 0.3924808     0.505      3869548
37            chr6     79031809   79034385         2577             *    167    153    93    90 0.4196297     0.517     16692615
38           chr19     20493453   20507068        13616             *     51     51    38    41 0.4588383     0.492      3855932
39           chr18     64897188   64898547         1360             *     23     19    26    23 0.5195573     0.538     48106187
40            chr6     79029649   79029919          271             *    144    136    80    76 0.5280326     0.514     16697081
41            chr6     79029920   79031110         1191             *    144    136    80    76 0.5280326     0.514     16695890
42            chr2     41092148   41101972         9825             *     69     66    61    58 0.5593940     0.512     36007147
43           chr15     32505886   32518049        12164             *     45     44    37    36 0.5688152     0.506      1794885
44           chr18     64904657   64905087          431             *     23     21    25    23 0.5756155     0.522     48113656
45           chr18     64905088   64905367          280             *     23     21    25    23 0.5756155     0.522     48114087
46           chr18     64905368   64906488         1121             *     22     21    25    23 0.6170188     0.516     48114367
47           chr18     64903149   64904521         1373             *     23     22    25    23 0.6183544     0.516     48112148
48           chr18     64904522   64904656          135             *     23     22    25    23 0.6183544     0.516     48113521
49           chr18     64898548   64903148         4601             *     23     22    26    23 0.6537661     0.521     48107547
50            chr6     79083327   79086086         2760             *    166    155   112    96 0.7152100     0.526     16640914
51            chr6     79034386   79036116         1731             *    167    160   105    92 0.7206161     0.519     16690884
52            chr6     79086087   79088461         2375             *    166    155   112    95 0.7345443     0.527     16638539
53            chr6     79036117   79039486         3370             *    167    161   107    92 0.7659317     0.520     16687514
54            chr6     79081010   79083326         2317             *    166    162   114    99 0.7733706     0.518     16643674
55            chr6     79042356   79056616        14261             *    167    163   110    95 0.7810535     0.518     16670384
56            chr6     79075016   79077157         2142             *    167    164   114    99 0.7842597     0.517     16649843
57            chr6     79088462   79090197         1736             *    162    154   111    93 0.7855776     0.525     16636803
58            chr6     79070426   79075015         4590             *    167    164   113    98 0.7859630     0.517     16651985
59            chr6     79039487   79042355         2869             *    167    162   110    94 0.7878992     0.520     16684645
60            chr6     79077158   79081009         3852             *    167    164   115    99 0.7987471     0.517     16645991
61            chr6     79069278   79070425         1148             *    167    164   114    98 0.8004684     0.517     16656575
62            chr6     79063712   79065998         2287             *    167    164   113    97 0.8022055     0.518     16661002
63            chr6     67075448   67079426         3979             *     76     72    60    47 0.8086951     0.533      4831447
64            chr6     79065999   79069277         3279             *    167    164   114    97 0.8160258     0.518     16657723
65            chr6     79056617   79063711         7095             *    167    164   112    95 0.8195597     0.519     16663289
66            chr6     67101258   67104015         2758             *     75     71    61    47 0.8250148     0.535      4857257
67            chr6     67079427   67101257        21831             *     76     72    61    47 0.8262660     0.535      4835426
68            chr6     67104016   67105019         1004             *     74     71    61    47 0.8380277     0.534      4860015
69            chr3     46771354   46825614        54261             *     13     15    18    14 0.8457294     0.517     19285386
70           chr15     32530025   32530130          106             *     64     67    64    52 0.8685106     0.518      1819024
71           chr20     52081230   52081774          545             *     46     44    40    28 0.8697929     0.544      8515226
72            chr4    161271979  161276892         4914             *     27     32    34    28 0.8810465     0.504     15990978
73           chr15     32587888   32595161         7274             *     62     67    61    50 0.8839336     0.512      1876887
74           chr15     32518050   32530024        11975             *     62     62    60    45 0.8873822     0.533      1807049
75           chr15     32538343   32549650        11308             *     64     68    65    52 0.8928386     0.518      1827342
76           chr20     52081775   52088118         6344             *     47     47    41    29 0.8939390     0.537      8508882
77           chr15     32530131   32538342         8212             *     64     67    65    51 0.8953165     0.522      1819130
78           chr15     32569801   32587887        18087             *     63     68    64    51 0.9052699     0.516      1858800
79           chr15     32549651   32569800        20150             *     63     68    65    51 0.9154210     0.518      1838650
80            chr4    161290510  161291569         1060             *     28     36    35    28 0.9343645     0.496     16009509
81            chr4    161276893  161290509        13617             *     28     36    36    28 0.9443671     0.500     15995892
82            chr5      8756148    8756614          467             *     19     27    29    18 0.9854716     0.516      7892147
83            chr5      8756615    8800106        43492             *     19     28    29    18 0.9886375     0.511      7892614
84            chr5      8756085    8756147           63             *     18     27    29    18 0.9892454     0.511      7892084
----

==== Fisher's Method  ====

===== Component-wise =====

----
> (fishers.p.cmp <- sum(-2*log(DF.cmp$p.vec)))
[1] 332
> pchisq(fishers.p.cmp, df = 2*length(DF.cmp$p.vec), lower.tail = FALSE)
[1] 7.73e-13
----

===== Region-wise. =====

----
> (fishers.p <- sum(-2*log(DF$p.vec)))
[1] 32.4
> pchisq(fishers.p, df = 2*length(DF$p.vec), lower.tail = FALSE)
[1] 0.181
----

=== Permutation Test ===

----
> fe.beaty <- fe.beaty[queryHits(findOverlaps(rowData(fe.beaty),DF.cmp$grange))]
> fe.pitt <- fe.pitt[queryHits(findOverlaps(rowData(fe.pitt),DF.cmp$grange))]
> fe.all <- FamilyExperiment( cbind(fe.beaty,fe.pitt), pedigree = PedClass(rbind(fe.beaty@pedigree,fe.pitt@pedigree)) )
----

----
> n.perm <- 1e3
> p.mat <- matrix(numeric(n.perm*nrow(fe.all)), ncol = nrow(fe.all), nrow = n.perm )
> set.seed(1)
> for( i in 1:n.perm ){
      cleft.index <- sample(nrow(completeTrios(fe.all)),nrow(completeTrios(fe.beaty)), replace = FALSE )
      cleft.ids <- unique(c(as.matrix(completeTrios(fe.all))[cleft.index,]))
      con.ids   <- unique(c(as.matrix(completeTrios(fe.all))[-cleft.index,]))
      fe.beaty.perm <- fe.all[,colnames(fe.all) %in% cleft.ids]
      fe.pitt.perm <- fe.all[,colnames(fe.all) %in% con.ids]
      trioAssay.beaty <- trioClasses:::TrioAssay(fe.beaty.perm, type = "cnv")
      trioStates.beaty <- with(trioAssay.beaty, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
      dimnames(trioStates.beaty) <- dimnames(trioAssay.beaty$O)
      trioAssay.pitt <- trioClasses:::TrioAssay(fe.pitt.perm, type = "cnv")
      trioStates.pitt <- with(trioAssay.pitt, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
      dimnames(trioStates.pitt) <- dimnames(trioAssay.pitt$O)
      table.list.beaty <- apply(trioStates.beaty, 2, "table")
      table.list.pitt <- apply(trioStates.pitt, 2, "table")
      TU.mat.beaty <- matrix(unlist(lapply(table.list.beaty, trioClasses:::CountTU)), nrow = length(table.list.beaty), ncol = 2, byrow = TRUE )
      TU.mat.pitt <- matrix(unlist(lapply(table.list.pitt, trioClasses:::CountTU)), nrow = length(table.list.pitt), ncol = 2, byrow = TRUE )
      TU.mat <- cbind(TU.mat.beaty, TU.mat.pitt)
      colnames(TU.mat) <- c("T.case","U.case","T.con","U.con")
      rownames(TU.mat) <- names(table.list.beaty)
      TU.mat.cmp <- TU.mat
      gr.cmp <- rowData(fe.beaty.perm)
      fish.list <- apply(TU.mat,1,trioClasses:::TU.fish)
      p.mat[i,] <- unlist( lapply( fish.list, function(obj) return(obj$p.value) ) )
 }