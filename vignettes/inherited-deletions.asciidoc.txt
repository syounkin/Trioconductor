:toc:
:numbered:
:data-uri:

----
> library("trioClasses")
----
== Construct CNV Matrix ==
Before any analysis begins we construct the CNV matrix.  This matrix is a matrix containing 0,1,2 for number of deletions at a CNV component.  Each row corresponds to a subject, and each column to a cnv component.
----
> library("trioClasses")
----
----
> source("~/jhsph/R/packages/CleftCNVAssoc/vignettes/curated/make-data.R")
> gr.deletion.beaty <- gr.beaty[values(gr.beaty)$numsnp >= 10 & values(gr.beaty)$cn %in% 0:1 ]
> homos.beaty <- with(values(gr.deletion.beaty),cn==0)
> gr.deletion.pitt <- gr.pitt[values(gr.pitt)$numsnp >= 10 & values(gr.pitt)$cn %in% 0:1 ]
> homos.pitt <- with(values(gr.deletion.pitt),cn==0)
> gr.deletion.beaty.clean <- c( unlist(reduce(split(gr.deletion.beaty, values(gr.deletion.beaty)$id))), unlist(reduce(split(gr.deletion.beaty[homos.beaty], values(gr.deletion.beaty[homos.beaty])$id))))
> gr.deletion.pitt.clean <- c( unlist(reduce(split(gr.deletion.pitt, values(gr.deletion.pitt)$id))), unlist(reduce(split(gr.deletion.pitt[homos.pitt], values(gr.deletion.pitt[homos.pitt])$id))))
----
Now with these GRanges objects we use the trioClasses function CNVMatrix to construct the CNV matrices.
----
> system.time( cnv.obj.beaty <- CNVMatrix( gr.deletion.beaty.clean, gr = gr.deletion.pitt.clean ) )
> system.time( cnv.obj.pitt <- CNVMatrix( gr.deletion.pitt.clean, gr = gr.deletion.beaty.clean ) )
> save( cnv.obj.beaty, cnv.obj.pitt, file = "./../data/cnv.RData" )
----

== Make Data ==
Now we use the CNV matrix as part of a FamilyExperiment object, as defined in trioClasses.  With the FE object we may easily acces trio-states of CNV components and regions.
----
>   library("CleftCNVAssoc")
>   data("pedigrees", package="CleftCNVAssoc")
>   data("cnv", package = "trioClasses")
----
Now we create the FamilyExperiment for the cleft group.
----
> fe.beaty
class: FamilyExperiment 
dim: 7256 1339 
exptData(0):
assays(1): cnv
rownames(7256): comp1 comp2 ... comp7255 comp7256
rowData metadata column names(0):
colnames(1339): 11005_01@1008472480 11005_02@1008472482 ...
  18117_02@0070298660 18117_03@0070298657
colData names(1): id
pedigree(2082): famid id fid mid sex dx
complete trios(445):
----
The control group.
----
> fe.pitt
class: FamilyExperiment 
dim: 7256 902 
exptData(0):
assays(1): cnv
rownames(7256): comp1 comp2 ... comp7255 comp7256
rowData metadata column names(0):
colnames(902): 173000367@0070353602 173000562@0070278291 ...
  175198958@0070318441 175199696@0072922513
colData names(1): id
pedigree(752): famid id fid mid sex dx
complete trios(391):
----

== Association (Component-wise) ==
Our first idea was to do a two by two test on the transmitted and non-transmitted counts in clefts and controls.  In the process of doing so we identified regions of under-transmission, as well as a few signifcany regions.

// The above must have been written before the MAF method was implemented.
Compute a DataFrame containing counts of transmissions by case/control with rows for components.  This is partly what distinguishes a DataFrame from a data.frame --- the ability to keep a GRanges object in a column.
----
> TU.mat.beaty <- matrix(unlist(lapply(table.list.beaty, trioClasses:::CountTU)), nrow = length(table.list.beaty), ncol = 2, byrow = TRUE )
> TU.mat.pitt <- matrix(unlist(lapply(table.list.pitt, trioClasses:::CountTU)), nrow = length(table.list.pitt), ncol = 2, byrow = TRUE )
> TU.mat <- cbind(TU.mat.beaty, TU.mat.pitt)
> testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
> TU.mat <- TU.mat[testable,]
> rownames(TU.mat) <- names(table.list.beaty)[testable]
> colnames(TU.mat) <- c("T.case","U.case","T.con","U.con")
> DF <- DataFrame(rowData(fe.beaty)[testable],TU.mat)
> colnames(DF) <- c("grange", colnames(TU.mat))
----
Now with that DataFrame we construct a histogram of overall transmission rate by component.
----
> hist(trans.vec <- rowSums(TU.mat[,c(1,3)])/rowSums(TU.mat), breaks = 20)
----
image::figures/fig-hist.jpg[]

Histogram of transmission rate component-wise.  We see a clear bimodal distribution.
----
DataFrame with 632 rows and 7 columns
       grange    T.case    U.case     T.con     U.con     p.vec trans.vec
    <GRanges> <integer> <integer> <integer> <integer> <numeric> <numeric>
1    ########        28        30        13        26     0.105     0.423
2    ########        28        31        17        28     0.216     0.433
3    ########        29        31        17        28     0.190     0.438
4    ########        35        32        23        33     0.146     0.472
5    ########        43        33        29        35     0.123     0.514
6    ########        43        40        33        43     0.184     0.478
7    ########        43        42        38        45     0.320     0.482
8    ########        43        43        38        45     0.347     0.479
9    ########        44        43        38        45     0.319     0.482
...       ...       ...       ...       ...       ...       ...       ...
624  ########        20        19        13        13     0.560     0.508
625  ########        20        20        13        14     0.540     0.493
626  ########        20        20        13        15     0.483     0.485
627  ########        20        19        12        15     0.384     0.485
628  ########        19        19        12        15     0.425     0.477
629  ########        19        19        13        17     0.382     0.471
630  ########        17        18        13        17     0.432     0.462
631  ########        46        44        40        28     0.870     0.544
632  ########        47        47        41        29     0.894     0.537
----
Number of components and number of regions is given below.
----
> c(length(DF$grange),length(reduce(DF$grange)))
[1] 632  45
----

=== Figures ===

image::figures/fig-qqplot.jpg[]




----
   seqnames     start       end  width strand     p.min p.median trans.median n.cmp
1     chr15  19768826  19982036 213211      * 0.0000307 0.001369        0.330    21
2      chr7 141419097 141441259  22163      * 0.0000983 0.000659        0.541     8
3     chr15  19341464  19545168 203705      * 0.0001407 0.001276        0.333    30
4      chr8  39356825  39497557 140733      * 0.0022040 0.012376        0.536    17
5      chr6  32611466  32643872  32407      * 0.0022198 0.015087        0.361    43
6      chr6  32059186  32065343   6158      * 0.0025599 0.006837        0.449     5
7     chr15  19095051  19205581 110531      * 0.0043068 0.015037        0.356    13
8     chr17  41785962  41914286 128325      * 0.0062858 0.010970        0.454    22
9      chr6  32094298  32107594  13297      * 0.0323497 0.046251        0.258    11
10     chr6  32066939  32093133  26195      * 0.0359375 0.307320        0.273    15
11     chr6  32650822  32664356  13535      * 0.0396005 0.066098        0.224     9
12    chr16  33778130  33820307  42178      * 0.0422303 0.316474        0.516    12
13    chr11  55124465  55209499  85035      * 0.0574315 0.529904        0.535    26
14     chr3  75502426  75719139 216714      * 0.0582423 0.302094        0.432    15
15    chr14  18347035  18372086  25052      * 0.0587674 0.413121        0.455    12
16     chr5  97074222  97125076  50855      * 0.0716268 0.085417        0.478     5
17     chr1 103941535 104099390 157856      * 0.1051024 0.267315        0.480    25
18     chr5  69359352  69433008  73657      * 0.1057531 0.180652        0.262     9
19     chr6  31388080  31397263   9184      * 0.1339235 0.376097        0.478    14
20    chr19  20404485  20507068 102584      * 0.1456802 0.373094        0.501     6
21    chr11  48890168  48918267  28100      * 0.1614379 0.485123        0.465    20
22    chr16  32404517  32530051 125535      * 0.1906860 0.682627        0.277   123
23    chr12  36404411  36532019 127609      * 0.2296317 0.315588        0.185     7
24     chr1 195087039 195087039      1      * 0.2583597 0.258360        0.404     1
25     chr9  43594114  43674189  80076      * 0.2810095 0.463009        0.372    14
----
----
GRanges with 1 range and 4 metadata columns:
      seqnames               ranges strand |             p.min          p.median      trans.median     n.cmp
         <Rle>            <IRanges>  <Rle> |         <numeric>         <numeric>         <numeric> <integer>
  [1]    chr16 [32404517, 32530051]      * | 0.190686032146876 0.682627027049546 0.276872964169381       123
  ---
  seqlengths:
            chr1   chr1_random          chr2   chr2_random          chr3 ...          chrX   chrX_random          chrY          chrM
       247249719       1663265     242951149        185571     199501827 ...     154913754       1719168      57772954         16571
----
The outlier is on chromsome 16.  It is a region with 123 components, and has width 125.535 kB. chr16:32404517-32530051.  

image::figures/fig-cumsum.jpg[]

image::figures/fig-transmedianhist.jpg[]

image::figures/fig-qqplot-clean.jpg[]

image::figures/fig-cumsum2.jpg[]


== Association (Region-wise) ==
Note that this uses a very strict definition for non-transmitted.  To be non-transmitted a region must have no component in region with a trio-state that indicates non-transmission.  This may bias the estimate towards over-transmission.

First we see how many regions there are to begin with.
----
> reduce(rowData(fe.beaty))
GRanges with 2237 ranges and 0 metadata columns:
         seqnames               ranges strand
            <Rle>            <IRanges>  <Rle>
     [1]     chr1   [ 354188,  613900]      *
     [2]     chr1   [ 836671, 1617665]      *
     [3]     chr1   [1672234, 1782971]      *
     [4]     chr1   [2072349, 2564816]      *
     [5]     chr1   [2689509, 2739781]      *
     [6]     chr1   [2782661, 2840041]      *
     [7]     chr1   [2859773, 3037112]      *
     [8]     chr1   [3187607, 3201318]      *
     [9]     chr1   [3265998, 3298358]      *
     ...      ...                  ...    ...
  [2229]    chr22 [45833328, 45882946]      *
  [2230]    chr22 [45919059, 45945408]      *
  [2231]    chr22 [47310862, 47334116]      *
  [2232]    chr22 [47414612, 47441180]      *
  [2233]    chr22 [47520376, 47559621]      *
  [2234]    chr22 [47791598, 47892761]      *
  [2235]    chr22 [47983471, 48039811]      *
  [2236]    chr22 [48892935, 49130879]      *
  [2237]    chr22 [49276447, 49337535]      *
  ---
  seqlengths:
            chr1   chr1_random          chr2   chr2_random          chr3 ...          chrX   chrX_random          chrY          chrM
       247249719       1663265     242951149        185571     199501827 ...     154913754       1719168      57772954         16571
----
But many of these are rare.
Here we filter out any rare deletions by requiring at least 25 observeable transmissins in the cleft group and the control group.
----
> TU.mat <- trans.mat
> testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
> TU.mat <- TU.mat[testable,]
----
First we display the function that performs Fisher's exact test.
----
> trioClasses:::TU.fish
function (TU.vec) 
{
    if (!identical(c("T.case", "U.case", "T.con", "U.con"), names(TU.vec))) 
        return("TU vector must have the correct names.")
    fish <- fisher.test(matrix(TU.vec, nrow = 2, ncol = 2, byrow = TRUE), 
        alternative = "greater")
    return(fish)
}
<environment: namespace:trioClasses>
----
Then we apply it to each region after filtering out regions that did not have enough observations.
----
> fish.list <- apply(TU.mat,1,trioClasses:::TU.fish)
> p.vec <- unlist( lapply( fish.list, function(obj) return(obj$p.value) ) )
> DF <- DataFrame(DF,p.vec,transrate.all[testable])
> head(as(DF[with(as(DF,"data.frame"),order(p.vec)),],"data.frame"))
  grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con    p.vec transrate.all.testable.
1           chr15     18474541   20730425      2255885             *     54     47    44    94 0.000644                   0.410
2            chr7    141380317  141447476        67160             *     69     38    68    78 0.003397                   0.542
3            chr8     39341981   39548228       206248             *    140    104    32    45 0.010868                   0.536
4            chr6     32536895   32684456       147562             *     54     53    45    78 0.023386                   0.430
5            chr6     32055573   32124218        68646             *     35     33    17    32 0.052925                   0.444
6           chr17     41755843   42148466       392624             *     93     74    38    48 0.054580                   0.518
----
There are 39 regions that were tested.  Here we see the first six ordered by p-value and later ordered by transmission rate.
----
> head(as(DF[with(as(DF,"data.frame"),order(transrate.all.testable.)),],"data.frame"))
  grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con p.vec transrate.all.testable.
1           chr12     36270798   36733128       462331             *      7     24     5    26 0.375                   0.194
2            chr6     32694224   32788048        93825             *      5     23     8    17 0.935                   0.245
3            chr1    147272181  147849072       576892             *      8     32    34    87 0.890                   0.261
4            chr9     43515795   44821332      1305538             *     32     49    46    80 0.386                   0.377
5            chr2     89132524   91107283      1974760             *     16     43    28    29 0.996                   0.379
6            chr7    101914898  102109692       194795             *     11     18    19    28 0.675                   0.395
----

Note that a region on chromosome six appears twice in the top six by p-value.  However we see in the six regions with the lowest transmissin rates that there is a region with extremly low transmission rate nearby.  It seems likely that both the chr15 and chr6 signals are spurious and due to false positives in the controls.

=== Figures ===

image::figures/fig-transhist.jpg[]


image::figures/fig-cifigcleft.jpg[]

image::figures/fig-cifigcon.jpg[]

image::figures/fig-cifigall.jpg[]

image::figures/fig-cifig1.jpg[]



----
> NA
----

link:figures/cifigcleftnew-by-pos.pdf[Figure 1a? for manuscript]

link:figures/cifigcleftnew-by-pvalue.pdf[Figure 1b? for manuscript]



=== Tables ===

.Transmission Counts
[width="60%",cols="8"]
[options="header",grid="rows"]
|======
|pos|width|p-value|nearest gene|cleft transmitted|cleft untransmitted|control transmitted|control untransmitted
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=Chr7:141380317-141447476[chr7:141380317-141447476]|67,160|0.003397|link:http://genome.ucsc.edu/cgi-bin/hgGene?hgg_gene=uc003vwy.1&hgg_prot=NP_004659&hgg_chrom=chr7&hgg_start=141342147&hgg_end=141453016&hgg_type=knownGene&db=hg18&hgsid=340436443[MGAM]|69 (0.645)|38|68 (0.466)|78
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=Chr8:39341981-39548228[chr8:39,341,981-39,548,228]|206,248 |0.010868|link:http://genome.ucsc.edu/cgi-bin/hgc?hgsid=340437289&c=chr8&o=39427720&t=39499665&g=refGene&i=NR_073423[ADAM3A], link:http://genome.ucsc.edu/cgi-bin/hgc?hgsid=340437289&c=chr8&o=39291338&t=39379532&g=refGene&i=NR_001448[ADAM5]|140 (0.574)|104|32 (0.416)|45
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=chr15:18474541-20730425[chr15:18,474,541-20,730,425]|2,255,885|0.000644|too many, centromere|54 (0.535)|47|44 (0.319)|94
|======

=== MGAM & ADAM9 ===

.MGAM
[quote, Vincent-Chong et al., PLoS One 2013]
____
This study has identified a novel genomic amplification on chromosome 7q34 which was present in 34 out of 46 OSCC samples. The MGAM gene at this locus was significantly over expressed (6.6 fold) in 29 out of 30 samples analysed. It has been previously suggested that MGAM is a carbohydrate active enzyme that is involved in cell metabolism by breaking down the dietary starches and sugars into glucose [67]. The involvement of this gene in carcinogenesis could be explained by the Warburg effect which implies that during tumor progression, alterations are observed in glucose metabolism including glycolysis and oxidative phosphorylation process in cancer cells [68]. It could be hypothesized that over expression of MGAM may promote tumor growth by altering cell metabolism. Further investigation of this gene is required to elucidate its function, regulation and role in oral carcinogenesis.
____

See link:http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0054705[Vincent-Chong et al.] in Plos One -  "Genome Wide Analysis of Chromosomal Alterations in Oral Squamous Cell Carcinomas Revealed over Expression of MGAM and ADAM9." link:http://www.ncbi.nlm.nih.gov/pubmed/?term=23405089[PMID:23405089]

=== Centromeres & Telomeres ===

----
> data("centromere")
> centromere.gr
GRanges with 45 ranges and 0 metadata columns:
       seqnames                 ranges strand
          <Rle>              <IRanges>  <Rle>
   [1]     chr1 [121236957, 123476957]      *
   [2]     chr2 [ 91689898,  94689898]      *
   [3]     chr2 [242751149, 242951149]      *
   [4]     chr3 [        0,     35000]      *
   [5]     chr3 [ 90587544,  93487544]      *
   [6]     chr3 [199446827, 199501827]      *
   [7]     chr4 [ 49354874,  52354874]      *
   [8]     chr4 [191263063, 191273063]      *
   [9]     chr5 [        0,     63000]      *
   ...      ...                    ...    ...
  [37]    chr18   [15400898, 16764896]      *
  [38]    chr19   [       0,    11000]      *
  [39]    chr19   [26923622, 29923622]      *
  [40]    chr19   [63806651, 63811651]      *
  [41]    chr20   [       0,     8000]      *
  [42]    chr20   [26267569, 28033230]      *
  [43]    chr21   [10260000, 13260000]      *
  [44]    chr22   [11330000, 14330000]      *
  [45]    chr22   [49591432, 49691432]      *
  ---
  seqlengths:
    chr1 chr10 chr11 chr12 chr13 chr14 chr15 chr16 chr17 chr18 chr19 ... chr22  chr3  chr4  chr5  chr6  chr7  chr8  chr9  chrX  chrY
      NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA ...    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA
> dist.vec <- distanceToNearest(DF$grange,centromere.gr)$distance
> DF <- DataFrame(DF[order(dist.vec),],dist.vec[order(dist.vec)])
> DF$grange
GRanges with 39 ranges and 0 metadata columns:
       seqnames                 ranges strand
          <Rle>              <IRanges>  <Rle>
   [1]     chr7 [ 57778797,  62099233]      *
   [2]     chr2 [242565979, 242692820]      *
   [3]    chr14 [ 18189975,  19502504]      *
   [4]    chr12 [ 36270798,  36733128]      *
   [5]    chr15 [ 18474541,  20730425]      *
   [6]     chr2 [ 89132524,  91107283]      *
   [7]    chr11 [ 55116789,  55216671]      *
   [8]    chr16 [ 31931481,  33820307]      *
   [9]     chr9 [ 43515795,  44821332]      *
   ...      ...                    ...    ...
  [31]     chr4 [161252445, 161314427]      *
  [32]     chr7 [101914898, 102109692]      *
  [33]     chr3 [ 46765401,  46827683]      *
  [34]     chr5 [ 97073409,  97267981]      *
  [35]    chr18 [ 64879175,  64906488]      *
  [36]     chr2 [ 40785003,  41129076]      *
  [37]     chr1 [194976397, 195199868]      *
  [38]     chr7 [141380317, 141447476]      *
  [39]     chr1 [ 12769266,  13058015]      *
  ---
  seqlengths:
            chr1   chr1_random          chr2   chr2_random          chr3 ...          chrX   chrX_random          chrY          chrM
       247249719       1663265     242951149        185571     199501827 ...     154913754       1719168      57772954         16571
----

image::figures/fig-disthist.jpg[]


----
> plot(DF$dist.vec.order.dist.vec.., DF$transrate.all.testable., pch = 20, col = ifelse(DF$dist.vec.order.dist.vec..<=1e6,"red","black"), xlim = c(0,50e6))
> lines(c(0,max(DF$dist.vec.order.dist.vec..)), rep(1/2,2), lty = 3 )
----
image::figures/fig-disttrans.jpg[]


== Session Info ==
----
> date()
[1] "Tue Jul  9 19:14:16 2013"
> sessionInfo()
R version 3.0.0 (2013-04-03)
Platform: x86_64-unknown-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=C                 LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] splines   parallel  stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] TxDb.Hsapiens.UCSC.hg18.knownGene_2.9.0 GenomicFeatures_1.12.2                  AnnotationDbi_1.21.10                  
 [4] CleftCNVAssoc_0.0.2                     MinimumDistance_1.3.6                   GWASTools_1.5.8                        
 [7] sandwich_2.2-9                          zoo_1.7-9                               gdsfmt_0.9.11                          
[10] ncdf_1.6.6                              Biobase_2.19.2                          trioClasses_1.0.8                      
[13] snpStats_1.9.2                          Matrix_1.0-12                           lattice_0.20-15                        
[16] survival_2.37-4                         GenomicRanges_1.11.29                   IRanges_1.17.31                        
[19] BiocGenerics_0.5.6                      cacheSweave_0.6-1                       stashR_0.3-5                           
[22] filehash_2.2-1                          ascii_2.1                              

loaded via a namespace (and not attached):
 [1] affyio_1.27.1        BiocInstaller_1.10.1 biomaRt_2.15.0       Biostrings_2.27.11   bit_1.1-9            bitops_1.0-5        
 [7] BSgenome_1.27.1      codetools_0.2-8      DBI_0.2-5            digest_0.6.3         DNAcopy_1.33.1       ff_2.2-10           
[13] foreach_1.4.0        grid_3.0.0           GWASExactHW_1.01     iterators_1.0.6      lmtest_0.9-30        matrixStats_0.6.2   
[19] msm_1.1.4            mvtnorm_0.9-9994     oligoClasses_1.21.14 quantsmooth_1.25.0   RCurl_1.95-3         R.methodsS3_1.4.2   
[25] Rsamtools_1.11.16    RSQLite_0.11.2       rtracklayer_1.19.9   stats4_3.0.0         tools_3.0.0          VanillaICE_1.21.26  
[31] XML_3.95-0.1         zlibbioc_1.5.0      
----
