:toc:
:numbered:
:data-uri:


== Construct CNV Matrix ==
Before any analysis begins we construct the CNV matrix.  This matrix is a matrix containing 0,1,2 for number of deletions at a CNV component.  Each row corresponds to a subject, and each column to a cnv component.
----
> library("trioClasses")
----
----
> source("~/jhsph/R/packages/CleftCNVAssoc/vignettes/curated/make-data.R")
> gr.deletion.beaty <- gr.beaty[values(gr.beaty)$numsnp >= 10 & values(gr.beaty)$cn %in% 0:1 ]
> homos.beaty <- with(values(gr.deletion.beaty),cn==0)
> gr.deletion.pitt <- gr.pitt[values(gr.pitt)$numsnp >= 10 & values(gr.pitt)$cn %in% 0:1 ]
> homos.pitt <- with(values(gr.deletion.pitt),cn==0)
> gr.deletion.beaty.clean <- c( unlist(reduce(split(gr.deletion.beaty, values(gr.deletion.beaty)$id))), unlist(reduce(split(gr.deletion.beaty[homos.beaty], values(gr.deletion.beaty[homos.beaty])$id))))
> gr.deletion.pitt.clean <- c( unlist(reduce(split(gr.deletion.pitt, values(gr.deletion.pitt)$id))), unlist(reduce(split(gr.deletion.pitt[homos.pitt], values(gr.deletion.pitt[homos.pitt])$id))))
----
Now with these GRanges objects we use the trioClasses function CNVMatrix to construct the CNV matrices.
----
> system.time( cnv.obj.beaty <- CNVMatrix( gr.deletion.beaty.clean, gr = gr.deletion.pitt.clean ) )
> system.time( cnv.obj.pitt <- CNVMatrix( gr.deletion.pitt.clean, gr = gr.deletion.beaty.clean ) )
> save( cnv.obj.beaty, cnv.obj.pitt, file = "./../data/cnv.RData" )
----

== Make Data ==
Now we use the CNV matrix as part of a FamilyExperiment object, as defined in trioClasses.  With the FE object we may easily acces trio-states of CNV components and regions.
----
>   library("CleftCNVAssoc")
>   data("pedigrees", package="CleftCNVAssoc")
>   data("cnv", package = "trioClasses")
----
Now we create the FamilyExperiment for the cleft group.
----
> fe.beaty
class: FamilyExperiment 
dim: 7256 1339 
exptData(0):
assays(1): cnv
rownames(7256): comp1 comp2 ... comp7255 comp7256
rowData metadata column names(0):
colnames(1339): 11005_01@1008472480 11005_02@1008472482 ... 18117_02@0070298660 18117_03@0070298657
colData names(1): id
pedigree(2082): famid id fid mid sex dx
complete trios(445):
----
The control group.
----
> fe.pitt
class: FamilyExperiment 
dim: 7256 902 
exptData(0):
assays(1): cnv
rownames(7256): comp1 comp2 ... comp7255 comp7256
rowData metadata column names(0):
colnames(902): 173000367@0070353602 173000562@0070278291 ... 175198958@0070318441 175199696@0072922513
colData names(1): id
pedigree(752): famid id fid mid sex dx
complete trios(391):
----

== Association (Component-wise) ==
Our first idea was to do a two by two test on the transmitted and non-transmitted counts in clefts and controls.  In the process of doing so we identified regions of under-transmission, as well as a few signifcany regions.

// The above must have been written before the MAF method was implemented.
Compute a DataFrame containing counts of transmissions by case/control with rows for components.  This is partly what distinguishes a DataFrame from a data.frame --- the ability to keep a GRanges object in a column.
----
> TU.mat.beaty <- matrix(unlist(lapply(table.list.beaty, trioClasses:::CountTU)), nrow = length(table.list.beaty), ncol = 2, byrow = TRUE )
> TU.mat.pitt <- matrix(unlist(lapply(table.list.pitt, trioClasses:::CountTU)), nrow = length(table.list.pitt), ncol = 2, byrow = TRUE )
> TU.mat <- cbind(TU.mat.beaty, TU.mat.pitt)
> testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
> TU.mat <- TU.mat[testable,]
> rownames(TU.mat) <- names(table.list.beaty)[testable]
> colnames(TU.mat) <- c("T.case","U.case","T.con","U.con")
> DF <- DataFrame(rowData(fe.beaty)[testable],TU.mat)
> colnames(DF) <- c("grange", colnames(TU.mat))
----
Now with that DataFrame we construct a histogram of overall transmission rate by component.
----
> hist(trans.vec <- rowSums(TU.mat[,c(1,3)])/rowSums(TU.mat), breaks = 20)
----
image::figures/fig-hist.jpg[]

Histogram of transmission rate component-wise.  We see a clear bimodal distribution.
----
DataFrame with 632 rows and 7 columns
       grange    T.case    U.case     T.con     U.con     p.vec trans.vec
    <GRanges> <integer> <integer> <integer> <integer> <numeric> <numeric>
1    ########        28        30        13        26     0.105     0.423
2    ########        28        31        17        28     0.216     0.433
3    ########        29        31        17        28     0.190     0.438
4    ########        35        32        23        33     0.146     0.472
5    ########        43        33        29        35     0.123     0.514
...       ...       ...       ...       ...       ...       ...       ...
628  ########        19        19        12        15     0.425     0.477
629  ########        19        19        13        17     0.382     0.471
630  ########        17        18        13        17     0.432     0.462
631  ########        46        44        40        28     0.870     0.544
632  ########        47        47        41        29     0.894     0.537
----
Number of components and number of regions is given below.
----
> c(length(DF$grange),length(reduce(DF$grange)))
[1] 632  45
----

=== Figures ===

image::figures/fig-qqplot.jpg[]




----
   seqnames     start       end  width strand     p.min p.median trans.median n.cmp
1     chr15  19768826  19982036 213211      * 0.0000307 0.001369        0.330    21
2      chr7 141419097 141441259  22163      * 0.0000983 0.000659        0.541     8
3     chr15  19341464  19545168 203705      * 0.0001407 0.001276        0.333    30
4      chr8  39356825  39497557 140733      * 0.0022040 0.012376        0.536    17
5      chr6  32611466  32643872  32407      * 0.0022198 0.015087        0.361    43
6      chr6  32059186  32065343   6158      * 0.0025599 0.006837        0.449     5
7     chr15  19095051  19205581 110531      * 0.0043068 0.015037        0.356    13
8     chr17  41785962  41914286 128325      * 0.0062858 0.010970        0.454    22
9      chr6  32094298  32107594  13297      * 0.0323497 0.046251        0.258    11
10     chr6  32066939  32093133  26195      * 0.0359375 0.307320        0.273    15
11     chr6  32650822  32664356  13535      * 0.0396005 0.066098        0.224     9
12    chr16  33778130  33820307  42178      * 0.0422303 0.316474        0.516    12
13    chr11  55124465  55209499  85035      * 0.0574315 0.529904        0.535    26
14     chr3  75502426  75719139 216714      * 0.0582423 0.302094        0.432    15
15    chr14  18347035  18372086  25052      * 0.0587674 0.413121        0.455    12
16     chr5  97074222  97125076  50855      * 0.0716268 0.085417        0.478     5
17     chr1 103941535 104099390 157856      * 0.1051024 0.267315        0.480    25
18     chr5  69359352  69433008  73657      * 0.1057531 0.180652        0.262     9
19     chr6  31388080  31397263   9184      * 0.1339235 0.376097        0.478    14
20    chr19  20404485  20507068 102584      * 0.1456802 0.373094        0.501     6
21    chr11  48890168  48918267  28100      * 0.1614379 0.485123        0.465    20
22    chr16  32404517  32530051 125535      * 0.1906860 0.682627        0.277   123
23    chr12  36404411  36532019 127609      * 0.2296317 0.315588        0.185     7
24     chr1 195087039 195087039      1      * 0.2583597 0.258360        0.404     1
25     chr9  43594114  43674189  80076      * 0.2810095 0.463009        0.372    14
----
----
GRanges with 1 range and 4 metadata columns:
      seqnames               ranges strand |             p.min          p.median      trans.median     n.cmp
         <Rle>            <IRanges>  <Rle> |         <numeric>         <numeric>         <numeric> <integer>
  [1]    chr16 [32404517, 32530051]      * | 0.190686032146876 0.682627027049546 0.276872964169381       123
  ---
  seqlengths:
            chr1   chr1_random          chr2   chr2_random          chr3 ...          chrX   chrX_random          chrY          chrM
       247249719       1663265     242951149        185571     199501827 ...     154913754       1719168      57772954         16571
----
The outlier is on chromsome 16.  It is a region with 123 components, and has width 125.535 kB. chr16:32404517-32530051.  

image::figures/fig-cumsum.jpg[]

image::figures/fig-transmedianhist.jpg[]

image::figures/fig-qqplot-clean.jpg[]

image::figures/fig-cumsum2.jpg[]


== Association (Region-wise) ==
Note that this uses a very strict definition for non-transmitted.  To be non-transmitted a region must have no component in region with a trio-state that indicates non-transmission.  This may bias the estimate towards over-transmission.

First we see how many regions there are to begin with.
----
> reduce(rowData(fe.beaty))
GRanges with 2237 ranges and 0 metadata columns:
         seqnames               ranges strand
            <Rle>            <IRanges>  <Rle>
     [1]     chr1   [ 354188,  613900]      *
     [2]     chr1   [ 836671, 1617665]      *
     [3]     chr1   [1672234, 1782971]      *
     [4]     chr1   [2072349, 2564816]      *
     [5]     chr1   [2689509, 2739781]      *
     ...      ...                  ...    ...
  [2233]    chr22 [47520376, 47559621]      *
  [2234]    chr22 [47791598, 47892761]      *
  [2235]    chr22 [47983471, 48039811]      *
  [2236]    chr22 [48892935, 49130879]      *
  [2237]    chr22 [49276447, 49337535]      *
  ---
  seqlengths:
            chr1   chr1_random          chr2   chr2_random          chr3 ...          chrX   chrX_random          chrY          chrM
       247249719       1663265     242951149        185571     199501827 ...     154913754       1719168      57772954         16571
----
But many of these are rare.
Here we filter out any rare deletions by requiring at least 25 observeable transmissins in the cleft group and the control group.
----
> TU.mat <- trans.mat
> testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
> TU.mat <- TU.mat[testable,]
----
First we display the function that performs Fisher's exact test.
----
> trioClasses:::TU.fish
function (TU.vec) 
{
    if (!identical(c("T.case", "U.case", "T.con", "U.con"), names(TU.vec))) 
        return("TU vector must have the correct names.")
    fish <- fisher.test(matrix(TU.vec, nrow = 2, ncol = 2, byrow = TRUE), 
        alternative = "greater")
    return(fish)
}
<environment: namespace:trioClasses>
----
Then we apply it to each region after filtering out regions that did not have enough observations.
----
> fish.list <- apply(TU.mat,1,trioClasses:::TU.fish)
> p.vec <- unlist( lapply( fish.list, function(obj) return(obj$p.value) ) )
> DF <- DataFrame(DF,p.vec,transrate.all[testable],transrate.con[testable],transrate.cleft[testable])
> head(as(DF[with(as(DF,"data.frame"),order(p.vec)),],"data.frame"))
  grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con    p.vec transrate.all.testable.
1           chr15     18474541   20730425      2255885             *     54     47    44    94 0.000644                   0.410
2            chr7    141380317  141447476        67160             *     69     38    68    78 0.003397                   0.542
3            chr8     39341981   39548228       206248             *    140    104    32    45 0.010868                   0.536
4            chr6     32536895   32684456       147562             *     54     53    45    78 0.023386                   0.430
5            chr6     32055573   32124218        68646             *     35     33    17    32 0.052925                   0.444
6           chr17     41755843   42148466       392624             *     93     74    38    48 0.054580                   0.518
  transrate.con.testable. transrate.cleft.testable.
1                   0.319                     0.535
2                   0.466                     0.645
3                   0.416                     0.574
4                   0.366                     0.505
5                   0.347                     0.515
6                   0.442                     0.557
----
There are 39 regions that were tested.  Here we see the first six ordered by p-value and later ordered by transmission rate.
----
> head(as(DF[with(as(DF,"data.frame"),order(transrate.con.testable.)),],"data.frame"))
  grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con    p.vec transrate.all.testable.
1           chr12     36270798   36733128       462331             *      7     24     5    26 0.374521                   0.194
2            chr1    147272181  147849072       576892             *      8     32    34    87 0.890460                   0.261
3           chr15     18474541   20730425      2255885             *     54     47    44    94 0.000644                   0.410
4            chr6     32694224   32788048        93825             *      5     23     8    17 0.935376                   0.245
5            chr6     32055573   32124218        68646             *     35     33    17    32 0.052925                   0.444
6            chr9     43515795   44821332      1305538             *     32     49    46    80 0.385996                   0.377
  transrate.con.testable. transrate.cleft.testable.
1                   0.161                     0.226
2                   0.281                     0.200
3                   0.319                     0.535
4                   0.320                     0.179
5                   0.347                     0.515
6                   0.365                     0.395
----

Note that a region on chromosome six appears twice in the top six by p-value.  However we see in the six regions with the lowest transmissin rates that there is a region with extremly low transmission rate nearby.  It seems likely that both the chr15 and chr6 signals are spurious and due to false positives in the controls.

=== Figures ===

image::figures/fig-transhist.jpg[]


image::figures/fig-cifigcleft.jpg[]

image::figures/fig-cifigcon.jpg[]

image::figures/fig-cifigall.jpg[]

image::figures/fig-cifig1.jpg[]




link:figures/cifigcleftnew-by-pos.pdf[Figure 1a? for manuscript]

link:figures/cifigcleftnew-by-pvalue.pdf[Figure 1b? for manuscript]



=== Tables ===

.Transmission Counts
[width="60%",cols="8"]
[options="header",grid="rows"]
|======
|pos|width|p-value|nearest gene|cleft transmitted|cleft untransmitted|control transmitted|control untransmitted
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=Chr7:141380317-141447476[chr7:141380317-141447476]|67,160|0.003397|link:http://genome.ucsc.edu/cgi-bin/hgGene?hgg_gene=uc003vwy.1&hgg_prot=NP_004659&hgg_chrom=chr7&hgg_start=141342147&hgg_end=141453016&hgg_type=knownGene&db=hg18&hgsid=340436443[MGAM]|69 (0.645)|38|68 (0.466)|78
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=Chr8:39341981-39548228[chr8:39,341,981-39,548,228]|206,248 |0.010868|link:http://genome.ucsc.edu/cgi-bin/hgc?hgsid=340437289&c=chr8&o=39427720&t=39499665&g=refGene&i=NR_073423[ADAM3A], link:http://genome.ucsc.edu/cgi-bin/hgc?hgsid=340437289&c=chr8&o=39291338&t=39379532&g=refGene&i=NR_001448[ADAM5]|140 (0.574)|104|32 (0.416)|45
|link:http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg18&omimGene=full&decipher=full&position=chr15:18474541-20730425[chr15:18,474,541-20,730,425]|2,255,885|0.000644|too many, centromere|54 (0.535)|47|44 (0.319)|94
|======

=== MGAM & ADAM9 ===

.MGAM
[quote, Vincent-Chong et al., PLoS One 2013]
____
This study has identified a novel genomic amplification on chromosome 7q34 which was present in 34 out of 46 OSCC samples. The MGAM gene at this locus was significantly over expressed (6.6 fold) in 29 out of 30 samples analysed. It has been previously suggested that MGAM is a carbohydrate active enzyme that is involved in cell metabolism by breaking down the dietary starches and sugars into glucose [67]. The involvement of this gene in carcinogenesis could be explained by the Warburg effect which implies that during tumor progression, alterations are observed in glucose metabolism including glycolysis and oxidative phosphorylation process in cancer cells [68]. It could be hypothesized that over expression of MGAM may promote tumor growth by altering cell metabolism. Further investigation of this gene is required to elucidate its function, regulation and role in oral carcinogenesis.
____

See link:http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0054705[Vincent-Chong et al.] in Plos One -  "Genome Wide Analysis of Chromosomal Alterations in Oral Squamous Cell Carcinomas Revealed over Expression of MGAM and ADAM9." link:http://www.ncbi.nlm.nih.gov/pubmed/?term=23405089[PMID:23405089]

=== Centromeres, Telomeres & Low Mapability ===

We create a filter based on UCSC centromere/telomere locations and R. Scharpfs list of regions of low-mapability.

----
> data("centromere")
> lowmap.gr <- readRDS(file = "./../inst/low_mappability.rds")
> seqlevels(lowmap.gr) <- seqlevels(DF$grange)
> seqlengths(lowmap.gr) <- seqlengths(DF$grange)
> filter.gr <- reduce(c(lowmap.gr,centromere.gr))
> dist.vec <- as.data.frame(distanceToNearest(DF$grange,filter.gr))$distance
> DF <- DataFrame(DF[order(dist.vec),],dist.vec[order(dist.vec)])
> as.data.frame(DF)
   grange.seqnames grange.start grange.end grange.width grange.strand T.case U.case T.con U.con    p.vec transrate.all.testable.
1             chr1     12769266   13058015       288750             *     23     13    14    12 0.296532                   0.597
2             chr1    103899238  104126342       227105             *     48     39    39    41 0.249911                   0.521
3             chr1    147272181  147849072       576892             *      8     32    34    87 0.890460                   0.261
4             chr1    194976397  195199868       223472             *     13     15    15    21 0.449029                   0.438
5             chr2     89132524   91107283      1974760             *     16     43    28    29 0.995925                   0.379
6             chr2    242565979  242692820       126842             *     26     32    25    30 0.601028                   0.451
7             chr3     75470851   75730577       259727             *     46     54    50    52 0.715792                   0.475
8             chr4     68997831   69258302       260472             *     33     35    80    67 0.829317                   0.526
9             chr5     68871012   70700419      1829408             *     24     32    48    50 0.815949                   0.468
10            chr7     57778797   62099233      4320437             *     13     20   102   148 0.630937                   0.406
11            chr7    101914898  102109692       194795             *     11     18    19    28 0.674996                   0.395
12            chr9     43515795   44821332      1305538             *     32     49    46    80 0.385996                   0.377
13           chr11     48220946   48986763       765818             *     40     32    59    53 0.409198                   0.538
14           chr12     36270798   36733128       462331             *      7     24     5    26 0.374521                   0.194
15           chr14     18189975   19502504      1312530             *     40     48    72    77 0.712688                   0.473
16           chr15     18474541   20730425      2255885             *     54     47    44    94 0.000644                   0.410
17           chr16     31931481   33820307      1888827             *    121    104   128   111 0.518116                   0.537
18           chr17     41755843   42148466       392624             *     93     74    38    48 0.054580                   0.518
19           chr19     47939188   48537433       598246             *     29     32    24    27 0.555395                   0.473
20           chr11     55116789   55216671        99883             *    137    105    92    75 0.419150                   0.560
21            chr3     65159939   65187636        27698             *     72     59    50    39 0.623839                   0.555
22            chr7    141380317  141447476        67160             *     69     38    68    78 0.003397                   0.542
23            chr5     97073409   97267981       194573             *     35     27    20    30 0.061418                   0.491
24           chr15     32459510   32631865       172356             *     61     64    64    46 0.941827                   0.532
25            chr6     29940311   30032810        92500             *     77     64    73    64 0.459653                   0.540
26           chr19     20349698   20523385       173688             *     54     43    40    38 0.334945                   0.537
27            chr6     31382534   31422222        39689             *     53     50    45    55 0.217781                   0.483
28            chr8     39341981   39548228       206248             *    140    104    32    45 0.010868                   0.536
29            chr6     67065007   67111682        46676             *     72     62    58    44 0.729281                   0.551
30            chr6     32055573   32124218        68646             *     35     33    17    32 0.052925                   0.444
31            chr6     32536895   32684456       147562             *     54     53    45    78 0.023386                   0.430
32            chr6     32694224   32788048        93825             *      5     23     8    17 0.935376                   0.245
33            chr5      8756085    8811041        54957             *     19     26    29    18 0.981446                   0.522
34           chr20     52080333   52094148        13816             *     44     45    40    29 0.890151                   0.532
35            chr4    161252445  161314427        61983             *     28     33    35    27 0.911724                   0.512
36            chr6     79022244   79098876        76633             *    154    114   108    80 0.536642                   0.575
37            chr3     46765401   46827683        62283             *     12     15    18    14 0.878068                   0.508
38            chr2     40785003   41129076       344074             *     66     63    57    52 0.619394                   0.517
39           chr18     64879175   64906488        27314             *     22     21    26    20 0.764030                   0.539
   transrate.con.testable. transrate.cleft.testable. dist.vec.order.dist.vec..
1                    0.538                     0.639                         0
2                    0.487                     0.552                         0
3                    0.281                     0.200                         0
4                    0.417                     0.464                         0
5                    0.491                     0.271                         0
6                    0.455                     0.448                         0
7                    0.490                     0.460                         0
8                    0.544                     0.485                         0
9                    0.490                     0.429                         0
10                   0.408                     0.394                         0
11                   0.404                     0.379                         0
12                   0.365                     0.395                         0
13                   0.527                     0.556                         0
14                   0.161                     0.226                         0
15                   0.483                     0.455                         0
16                   0.319                     0.535                         0
17                   0.536                     0.538                         0
18                   0.442                     0.557                         0
19                   0.471                     0.475                         0
20                   0.551                     0.566                    258788
21                   0.562                     0.550                    923364
22                   0.466                     0.645                   1481524
23                   0.400                     0.565                   1519019
24                   0.582                     0.488                   1748509
25                   0.533                     0.546                   2859310
26                   0.513                     0.557                   3839615
27                   0.450                     0.515                   4301533
28                   0.416                     0.574                   4341772
29                   0.569                     0.537                   4821006
30                   0.347                     0.515                   4974572
31                   0.366                     0.505                   5455894
32                   0.320                     0.179                   5613223
33                   0.617                     0.422                   7892084
34                   0.580                     0.494                   8502852
35                   0.565                     0.459                  15971444
36                   0.574                     0.575                  16628124
37                   0.562                     0.444                  19283317
38                   0.523                     0.512                  35700002
39                   0.565                     0.512                  48088174
----

The filter accounts for 278 MB made up of 324 distinct regions.

image::figures/fig-disthist.jpg[]


In the figure above a horizontal line is drawn at 1 MB.  21 regions are within 1 MB of a bad region, which is 54% of all regions! Note that 19 regions overlap a bad region.  In the figure below points in red are within 1 MB of a bad region.

image::figures/fig-disttrans.jpg[]


image::figures/fig-filterout.jpg[]


== Session Info ==
----
> date()
[1] "Wed Jul 10 12:22:22 2013"
> sessionInfo()
R version 3.0.0 (2013-04-03)
Platform: x86_64-unknown-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=C                 LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] splines   parallel  stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] TxDb.Hsapiens.UCSC.hg18.knownGene_2.9.0 GenomicFeatures_1.13.8                  AnnotationDbi_1.23.11                  
 [4] CleftCNVAssoc_0.0.2                     MinimumDistance_1.5.0                   GWASTools_1.7.3                        
 [7] sandwich_2.2-10                         zoo_1.7-9                               gdsfmt_0.9.14                          
[10] ncdf_1.6.6                              Biobase_2.21.2                          trioClasses_1.0.8                      
[13] snpStats_1.11.0                         Matrix_1.0-12                           lattice_0.20-15                        
[16] survival_2.37-4                         GenomicRanges_1.13.15                   XVector_0.1.0                          
[19] IRanges_1.19.8                          BiocGenerics_0.7.2                      cacheSweave_0.6-1                      
[22] stashR_0.3-5                            filehash_2.2-1                          ascii_2.1                              

loaded via a namespace (and not attached):
 [1] affyio_1.29.0        BiocInstaller_1.11.1 biomaRt_2.17.1       Biostrings_2.29.3    bit_1.1-10           bitops_1.0-5        
 [7] BSgenome_1.29.0      codetools_0.2-8      DBI_0.2-7            digest_0.6.3         DNAcopy_1.35.0       ff_2.2-11           
[13] foreach_1.4.0        grid_3.0.0           GWASExactHW_1.01     iterators_1.0.6      lmtest_0.9-31        matrixStats_0.8.1   
[19] msm_1.2              mvtnorm_0.9-9994     oligoClasses_1.23.0  quantsmooth_1.27.0   RCurl_1.95-4.1       R.methodsS3_1.4.2   
[25] Rsamtools_1.13.16    RSQLite_0.11.4       rtracklayer_1.21.5   stats4_3.0.0         tools_3.0.0          VanillaICE_1.23.0   
[31] XML_3.96-1.1         zlibbioc_1.7.0      
----
