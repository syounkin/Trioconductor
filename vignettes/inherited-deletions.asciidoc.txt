:toc:
:numbered:
:data-uri:

== Association ==

// The above must have been written before the MAF method was implemented.
Compute a DataFrame containing counts of transmissions by case/control with rows for components.  This is partly what distinguishes a DataFrame from a data.frame --- the ability to keep a GRanges object in a column.
----
> TU.mat.beaty <- matrix(unlist(lapply(table.list.beaty, trioClasses:::CountTU)), nrow = length(table.list.beaty), ncol = 2, byrow = TRUE )
> TU.mat.pitt <- matrix(unlist(lapply(table.list.pitt, trioClasses:::CountTU)), nrow = length(table.list.pitt), ncol = 2, byrow = TRUE )
> TU.mat <- cbind(TU.mat.beaty, TU.mat.pitt)
> testable <- which(   (rowSums(TU.mat[,1:2])>=25) & (rowSums(TU.mat[,3:4])>=25) )
> TU.mat <- TU.mat[testable,]
> rownames(TU.mat) <- names(table.list.beaty)[testable]
> colnames(TU.mat) <- c("T.case","U.case","T.con","U.con")
> DF <- DataFrame(rowData(fe.beaty)[testable],TU.mat)
> colnames(DF) <- c("grange", colnames(TU.mat))
----
Now with that DataFrame we construct a histogram of overall transmission rate by component.
----
> hist(trans.vec <- rowSums(TU.mat[,c(1,3)])/rowSums(TU.mat), breaks = 20)
----
image::figures/fig-hist.jpg[]

Histogram of transmission rate component-wise.  We see a clear bimodal distribution.
Number of components and number of regions is given below.
----
> c(length(DF$grange),length(reduce(DF$grange)))
----
image::figures/fig-qqplot.jpg[]




image::figures/fig-transvp.jpg[]

The outlier is on chromsome 16.  It is a region with 123 components, and has width 125.535 kB. chr16:32404517-32530051.  

image::figures/fig-cumsum.jpg[]

image::figures/fig-transmedianhist.jpg[]

image::figures/fig-qqplot-clean.jpg[]

image::figures/fig-cumsum2.jpg[]


== New Counting Method ==

----
> reduce(rowData(fe.beaty))
GRanges with 2237 ranges and 0 metadata columns:
         seqnames               ranges strand
            <Rle>            <IRanges>  <Rle>
     [1]     chr1   [ 354188,  613900]      *
     [2]     chr1   [ 836671, 1617665]      *
     [3]     chr1   [1672234, 1782971]      *
     [4]     chr1   [2072349, 2564816]      *
     [5]     chr1   [2689509, 2739781]      *
     ...      ...                  ...    ...
  [2233]    chr22 [47520376, 47559621]      *
  [2234]    chr22 [47791598, 47892761]      *
  [2235]    chr22 [47983471, 48039811]      *
  [2236]    chr22 [48892935, 49130879]      *
  [2237]    chr22 [49276447, 49337535]      *
  ---
  seqlengths:
            chr1   chr1_random          chr2   chr2_random          chr3 ...          chrX   chrX_random          chrY          chrM
       247249719       1663265     242951149        185571     199501827 ...     154913754       1719168      57772954         16571
----

----
> trans.mat <- c()
> i <- 1 # index for regions
> n.reg <- length(reduce(rowData(fe.beaty)))
> system.time(
 for( i in 1:n.reg){
 fe.beaty.i <- fe.beaty[subjectHits(findOverlaps(reduce(rowData(fe.beaty))[i], rowData(fe.beaty)))]
 fe.pitt.i <- fe.pitt[subjectHits(findOverlaps(reduce(rowData(fe.pitt))[i], rowData(fe.pitt)))]
 
 if( length(rowData(fe.beaty.i)) > 1 ){
     trioAssay.beaty <- trioClasses:::TrioAssay(fe.beaty.i, type = "cnv")
     trioStates.beaty <- with(trioAssay.beaty, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
     dimnames(trioStates.beaty) <- dimnames(trioAssay.beaty$O)
 
     trioAssay.pitt <- trioClasses:::TrioAssay(fe.pitt.i, type = "cnv")
     trioStates.pitt <- with(trioAssay.pitt, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
     dimnames(trioStates.pitt) <- dimnames(trioAssay.pitt$O)
 
     trans.beaty.logical <- rowSums(matrix(trioStates.beaty %in% c("011","101","111","112","122","212"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
 
     untrans.beaty.logical <- rowSums(matrix(trioStates.beaty %in% c("010","100","111","110","121","211"), nrow = nrow(trioStates.beaty), ncol = ncol(trioStates.beaty), byrow=FALSE)) > 0
 
     trans.beaty <- sum(trans.beaty.logical)
 
     untrans.beaty <- sum(untrans.beaty.logical & !trans.beaty.logical)
 
     trans.pitt.logical <- rowSums(matrix(trioStates.pitt %in% c("011","101","111","112","122","212"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
 
     untrans.pitt.logical <- rowSums(matrix(trioStates.pitt %in% c("010","100","111","110","121","211"), nrow = nrow(trioStates.pitt), ncol = ncol(trioStates.pitt), byrow=FALSE)) > 0
 
     trans.pitt <- sum(trans.pitt.logical)
 
     untrans.pitt <- sum(untrans.pitt.logical & !trans.pitt.logical)
 
     trans.mat <- rbind( trans.mat, c(trans.beaty, untrans.beaty, trans.pitt, untrans.pitt) )
 }else{
     trans.mat <- rbind( trans.mat, c(NA,NA,NA,NA) )
 }
 }
 )