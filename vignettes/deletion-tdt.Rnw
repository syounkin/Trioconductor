% Sweave(file = "./deletion-tdt.Rnw")
\documentclass[10pt]{article}
<<echo=FALSE>>=
  options(width=70, continue = " ")
@
\SweaveOpts{eps=FALSE,echo=TRUE,figs.only=TRUE,keep.source=FALSE, prefix.string=figures/deletion-tdt}
\usepackage{fullpage}
\usepackage{times}
\usepackage[colorlinks=TRUE,urlcolor=blue,citecolor=blue]{hyperref}
\title{The R package \emph{trioClasses} for definition of the class \emph{FamilyExperiment}, an extension of \emph{SummarizedExperiment}, for use in trio based analyses of genetic data.}
\author{Samuel G. Younkin}%, Robert Scharpf, Holger Schwender, Ingo Ruczinski}
\date{\today}
\begin{document}
\setlength{\parskip}{0.2\baselineskip}
\setlength{\parindent}{0pt}
\maketitle
\section{Packages \& Data}
<<package>>=
library("trioClasses")
data("cnv", package = "trioClasses")
data("pedigrees", package="CleftCNVAssoc")
@
See vignette ``CNVMatrix'' method for description of cnv object.
\section{SummarizedExperiment}
<<data, echo = TRUE, eval = TRUE>>=
(se <- SummarizedExperiment(assays = SimpleList(cnv = t(cnv.obj$cnv.mat)), colData = DataFrame(id=rownames(cnv.obj$cnv.mat), row.names = rownames(cnv.obj$cnv.mat)), rowData = cnv.obj$cmp.gr ))
@ 
\section{Pedigree}
<<beaty-ped>>=
beaty.trios <- MinimumDistance:::trios(beaty.pedigree)
beaty.ped <- DataFrame(famid = do.call("rbind",strsplit(beaty.trios$O, "_" ))[,1], id = beaty.trios$O, fid = beaty.trios$F, mid = beaty.trios$M, sex = NA, dx = NA)
@ 
<<ped, eval = TRUE>>=
ped <- PedClass(beaty.ped)
@ 
\section{FamilyExperiment}
<<fe>>=
(fe <- FamilyExperiment(se, pedigree = ped ))
@ 
<<trioStates>>=
trioAssay <- trioClasses:::TrioAssay(fe, type = "cnv")
trioStates <- with(trioAssay, matrix( paste0(F,M,O), nrow = nrow(O), ncol = ncol(O)))
dimnames(trioStates) <- dimnames(trioAssay$O)
#table(trioStates[,1])
@ 
<<table-list>>=
table.list <- apply(trioStates, 2, "table")
head(table.list)
@ 
Now, I need a function that acts on tables.
<<transtab>>=
trans.vec <- as( lapply( table.list, trioClasses:::trans.tab ), "numeric")
head(table.list[which(trans.vec <= 0.05/length(trans.vec))])
reduce(cnv.obj$cmp.gr[which(trans.vec <= 0.05/length(trans.vec))])
@ 
\end{document}
